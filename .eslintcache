[{"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\algorithms.js":"1","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\area_of_visibility.js":"2","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\arrays.js":"3","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\constructions.js":"4","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\control_loadjs.js":"5","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\dates.js":"6","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\DOM.js":"7","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\functions.js":"8","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\Iterator_generator.js":"9","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\locales.js":"10","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\localization.js":"11","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\map_set.js":"12","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\notification.js":"13","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\objects.js":"14","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\patterns.js":"15","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\promises.js":"16","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\promises1.js":"17","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\regexp.js":"18","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\strings.js":"19","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\symbols.js":"20","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\tasks\\dateCalc.js":"21","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\tasks\\morse.js":"22","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\transformations.js":"23","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\types.js":"24","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\_test.js":"25"},{"size":10219,"mtime":1585836685368,"results":"26","hashOfConfig":"27"},{"size":706,"mtime":1587815514617,"results":"28","hashOfConfig":"27"},{"size":14949,"mtime":1587716091398,"results":"29","hashOfConfig":"27"},{"size":3840,"mtime":1586004684108,"results":"30","hashOfConfig":"27"},{"size":575,"mtime":1585836685370,"results":"31","hashOfConfig":"27"},{"size":234,"mtime":1585836685370,"results":"32","hashOfConfig":"27"},{"size":1843,"mtime":1585836685367,"results":"33","hashOfConfig":"27"},{"size":3961,"mtime":1585838448791,"results":"34","hashOfConfig":"27"},{"size":7770,"mtime":1585836685367,"results":"35","hashOfConfig":"27"},{"size":1998,"mtime":1585836685371,"results":"36","hashOfConfig":"27"},{"size":2216,"mtime":1585836685371,"results":"37","hashOfConfig":"27"},{"size":715,"mtime":1587119479876,"results":"38","hashOfConfig":"27"},{"size":2038,"mtime":1585836685371,"results":"39","hashOfConfig":"27"},{"size":10147,"mtime":1586945053841,"results":"40","hashOfConfig":"27"},{"size":2958,"mtime":1585836685373,"results":"41","hashOfConfig":"27"},{"size":1791,"mtime":1585836685374,"results":"42","hashOfConfig":"27"},{"size":2539,"mtime":1585836685374,"results":"43","hashOfConfig":"27"},{"size":5382,"mtime":1586792331043,"results":"44","hashOfConfig":"27"},{"size":5832,"mtime":1585836685375,"results":"45","hashOfConfig":"27"},{"size":2983,"mtime":1585836685375,"results":"46","hashOfConfig":"27"},{"size":3128,"mtime":1585836685376,"results":"47","hashOfConfig":"27"},{"size":1432,"mtime":1585836685376,"results":"48","hashOfConfig":"27"},{"size":1243,"mtime":1585909526643,"results":"49","hashOfConfig":"27"},{"size":2139,"mtime":1585836685377,"results":"50","hashOfConfig":"27"},{"size":500,"mtime":1587814726872,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"1lft151",{"filePath":"55","messages":"56","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":8,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":7,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":28,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":21,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\algorithms.js",["120"],"'use strict'\r\n{\r\n  /**\r\n   * Вам предлагается создать функцию, которая принимает два параметра. Первый параметр, nums, представляет собой массив чисел. \r\n   * Второй параметр, total – это одно число. Выходные данные функции должны быть двухэлементным массивом, который представляет \r\n   * собой пару чисел в nums, которые при суммирование равны total.\r\n   */\r\n  const len = 100_000;\r\n  const bigArr = new Array(len).fill(1);\r\n  bigArr[len - 2] = 9;\r\n  bigArr[len - 1] = 10;\r\n  const total = 19;\r\n  //перебор сложность O(n2)\r\n  /*\r\n  const twoSum = (nums, total) => {\r\n    let iterations = 0;\r\n    const startTime = new Date();\r\n    for (let i = 0; i < nums.length - 1; i++) {\r\n      for (let j = i + 1; j < nums.length; j++) {\r\n        iterations++;\r\n        if (nums[i] + nums[j] === total) {\r\n          console.log(\r\n            `Iterations: ${iterations}`,\r\n            `Time: ${new Date() - startTime}ms`\r\n          );\r\n          return [nums[i], nums[j]];\r\n        }\r\n      }\r\n    }\r\n  };\r\n  */\r\n  //хэш-таблица сложность O(n)\r\n  const twoSum = (nums, total) => {\r\n    let iterations = 0;\r\n    const startTime = new Date();\r\n    const previousValues = {};\r\n    for (let i = 0; i < nums.length; i++) {\r\n      iterations++;\r\n      const complement = total - nums[i];\r\n      if (previousValues[complement]) {\r\n        console.log(\r\n          `Iterations: ${iterations}`,\r\n          `Time: ${new Date() - startTime}ms`\r\n        );\r\n        return [complement, nums[i]];\r\n      }\r\n      previousValues[nums[i]] = true;\r\n    }\r\n  };\r\n\r\n  console.log(twoSum(bigArr, total));\r\n  // Iterations: 4999950000 Time: 20032ms\r\n  const bar = () => console.log('bar');\r\n  const baz = () => console.log('baz');\r\n  const foo = () => {\r\n    console.log(\"foo\");\r\n    setTimeout(bar, 0);\r\n    new Promise((resolve, reject) => resolve('should be right after baz, before bar')).then(console.log);\r\n    baz();\r\n  }\r\n  foo();\r\n\r\n  //************** Число Пи\r\n  let i = 1n;\r\n  let x = 3n * (10n ** 120n);\r\n  let pi = x;\r\n  while (x > 0) {\r\n    x = x * i / ((i + 1n) * 4n);\r\n    pi += x / (i + 2n);\r\n    i += 2n;\r\n  }\r\n  console.log(pi / (10n ** 20n));\r\n  //31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679n\r\n\r\n  // ! **********************************************************\r\n  // ! ******************** Тасование Фишера — Йетса (метода Дуршенфельда)\r\n  console.group(\"************** Тасование Фишера — Йетса\");\r\n  let arrShuffle = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  function shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1)); // случайный индекс от 0 до i \r\n      // поменять элементы местами \r\n      // мы используем для этого синтаксис \"деструктурирующее присваивание\" \r\n      // let t = array[i]; array[i] = array[j]; array[j] = t \r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n  console.log(shuffle(arrShuffle));\r\n  // ! подсчёт вероятности для всех возможных вариантов\r\n  let count = {\r\n    '123': 0,\r\n    '132': 0,\r\n    '213': 0,\r\n    '231': 0,\r\n    '321': 0,\r\n    '312': 0\r\n  };\r\n  for (let i = 0; i < 1000000; i++) {\r\n    let array = [1, 2, 3];\r\n    shuffle(array);\r\n    count[array.join('')]++;\r\n  }\r\n  // показать количество всех возможных вариантов\r\n  for (let key in count) {\r\n    console.log(`${key}: ${count[key]}`);\r\n  }\r\n  console.groupEnd();\r\n  // ! **********************************************************\r\n  // ! ******************** поменять местами значение переменных\r\n  let a = 1;\r\n  let b = 2;\r\n\r\n  [a, b] = [b, a];\r\n\r\n  console.log(a); // => 2\r\n  console.log(b); // => 1\r\n  /* \r\n  1. a = a ^ b\r\n  2. b = a ^ b, На основании 1 aзаменяется на a ^ b. \r\n  Таким образом b = (a ^ b) ^ b = a ^ (b ^ b) = a ^ 0 = a. \r\n  Помни чем b сейчас a.\r\n  3. a = a ^ b, На основании 1 aзамещен a ^ bи на основе 2 bзамещен a. Таким образом a = (a ^ b) ^ a = b ^ (a ^ a) = b ^ 0 = b. Переменная aстановится b.\r\n  */\r\n  a = a ^ b; //XOR  \r\n  b = a ^ b;\r\n  a = a ^ b;\r\n\r\n  console.log(a); // => 1\r\n  console.log(b); // => 2\r\n  // ! **********************************************************\r\n  // ! *********************   Алгоритм:\r\n  /*\r\n  - создаем переменную result, значением которой являются первые две буквы строки\r\n  - начинаем итерацию с третьей буквы:\r\n      - если текущая буква отличается хотя бы от одной из двух предыдущих, добавляем ее в result\r\n      - иначе если текущая буква такая же, как две предыдущие, ничего не делаем\r\n  - возвращаем result\r\n  */\r\n  function solution(input) {\r\n    let result = input.slice(0, 2);\r\n    for (let i = 2; i < input.length; i++) {\r\n      if (input[i] !== input[i - 1] || input[i] !== input[i - 2]) {\r\n        result += input[i];\r\n      }\r\n    }\r\n    console.log(result);\r\n    return result;\r\n  }\r\n  solution('eedaaad'); // eedaad\r\n  solution('xxxtxxx'); // xxtxx\r\n  solution('uuuuxxaaaaxuuu'); // uuxxaaxuu\r\n  console.log('uuuuxxaaaaxuuu'.replace(/(\\w)\\1{2,}/g, '$1$1'));\r\n\r\n  // ! **********************************************************\r\n  // ! *********************   Алгоритм:\r\n  /*\r\n  - создаем пустой объект\r\n  - перебираем числа в массиве\r\n      - находим сумму цифр каждого числа\r\n      - если суммы цифр не существует как свойства объекта:\r\n          - создаем свойство и присваиваем ему в качестве значения массив, переданный функции\r\n      - иначе если сумма цифр существует как свойство объекта:\r\n          - добавляем число из массива, переданного функции, в массив, на который ссылается свойство\r\n  - получаем массив из значений объекта (которые представляют собой \"подмассивы\", содержащие числа с одинаковыми суммами цифр)\r\n  - отфильтровываем подмассивы, содержащие меньше двух чисел\r\n  - для любого подмассива, содержащего больше двух чисел, находим два наибольших, остальные отбрасываем\r\n  - заменяем каждый подмассив суммой двух его чисел\r\n  - находим наибольшее число в массиве и возвращаем его или возвращаем -1, если в массиве нет чисел\r\n  */\r\n  function solution1(arr) {\r\n    let sums = {};\r\n\r\n    arr.forEach(num => {\r\n      let sum = String(num).split('').reduce((a, b) => Number(a) + Number(b));\r\n\r\n      sums[sum] ? sums[sum].push(num) : sums[sum] = [num];\r\n    });\r\n\r\n    let result = Object.values(sums)\r\n      .filter(nums => nums.length >= 2)\r\n      .map(nums => nums.sort((a, b) => b - a).slice(0, 2))\r\n      .map(nums => nums.reduce((a, b) => a + b))\r\n    [0]\r\n\r\n    console.log(result || -1);\r\n    return result || -1;\r\n  }\r\n  solution1([51, 71, 17, 42]); // 93\r\n  solution1([42, 33, 60]); // 102\r\n  solution1([51, 32, 43]); // -1\r\n  // ! **********************************************************\r\n  // ! *********************   Алгоритм:\r\n  /*\r\n  Для строки, состоящей из трех и более букв:\r\n  если строка содержит 3-5 одинаковых букв подряд, необходимо совершить 1 действие\r\n  если 6-8 таких букв - 2 действия\r\n  если 9-11 букв - 3 действия\r\n  Алгоритм:\r\n  - перебираем буквы в поисках подстроки, состоящей из 3 и более одинаковых букв подряд\r\n  - добавляем подстроки, состоящие из 3 и более одинаковых букв подряд, в массив\r\n    - \"мапируем\" массив с подстроками:\r\n        - определяем количество букв\r\n        - извлекаем 2\r\n        - округляем до ближайшего целого числа, кратного 3\r\n        - делим на 3 и возвращаем частное\r\n    - возвращаем сумму частных\r\n  */\r\n  function numberOfMovesForStreak(streak) {\r\n    let length = streak.length - 2;\r\n\r\n    while (length % 3 !== 0) {\r\n      length++;\r\n    }\r\n\r\n    return length / 3;\r\n  }\r\n\r\n  function solution2(input) {\r\n    const streaks = [];\r\n    let temp = '';\r\n\r\n    for (let i = 0; i < input.length; i++) {\r\n      if (input[i] === input[i - 1]) {\r\n        temp += input[i];\r\n      } else {\r\n        if (temp.length > 2 && temp.length !== 0) {\r\n          streaks.push(temp);\r\n        }\r\n        temp = input[i];\r\n      }\r\n    }\r\n    if (temp.length > 2) {\r\n      streaks.push(temp);\r\n    }\r\n\r\n    console.log(streaks.map(numberOfMovesForStreak).reduce(((a, b) => a + b), 0));\r\n    return streaks.map(numberOfMovesForStreak).reduce(((a, b) => a + b), 0);\r\n  }\r\n  solution2('baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'); // 1\r\n  solution2('baaabbaabbba'); // 2\r\n  solution2('baabab'); // 0\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\area_of_visibility.js",["121","122","123","124"],"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\arrays.js",["125","126","127","128","129","130","131","132"],"'use strict'\r\n{\r\n  //#region //! Шпаргалка по методам массива:\r\n  /*\r\n! Для добавления/удаления элементов:\r\n  ● push (...items)  //? – добавляет элементы в конец,\r\n  ● pop()  //? – извлекает элемент с конца,\r\n  ● shift()  //? – извлекает элемент с начала,\r\n  ● unshift(...items) //? – добавляет элементы в начало.\r\n  ● splice(pos, deleteCount, ...items) //? – начиная с индекса  pos  удаляет\r\n  ● deleteCount  //? элементов и вставляет  items .\r\n  ● slice(start, end) //? – создаёт новый массив, копируя в него элементы с позиции\r\n                        ? start  до  end  (не включая  end ).\r\n  ● concat(...items) // ? – возвращает новый массив: копирует все члены текущего\r\n                        ? массива и добавляет к нему  items . Если какой-то из  items  является массивом,\r\n                        ? тогда берутся его элементы.\r\n! Для поиска среди элементов:\r\n  ● indexOf/lastIndexOf(item, pos)  – ищет  item , начиная с позиции  pos , и\r\nвозвращает его индекс или  -1 , если ничего не найдено.\r\n  ● includes(value)  – возвращает  true , если массив имеет значение  value , в\r\nпротивном случае  false .\r\n  ● find/filter(func)  – фильтрует элементы через функцию и отдаёт первые/все\r\nзначения, которые при прохождении через неё возвращают  true .\r\nfindIndex  похож на  find , но возвращает индекс вместо значения.\r\nДля перебора элементов:\r\n  ● forEach(func)  – вызывает  func  для каждого элемента. Ничего не возвращает.\r\nДля преобразования массива:\r\n  ● map(func)  – создаёт новый массив из результатов вызова  func  для каждого\r\nэлемента.\r\n  ● sort(func)  – сортирует массив на месте, а потом возвращает его.\r\n  ● reverse()  – на месте меняет порядок следования элементов на противоположный\r\nи возвращает изменённый массив.\r\n  ● split/join  – преобразует строку в массив и обратно.\r\n  ● reduce(func, initial)  – вычисляет одно значение из всего массива, вызывая\r\nfunc  для каждого элемента и передавая промежуточный результат между\r\nвызовами.\r\n! Дополнительно:\r\n  ● Array.isArray(arr)  проверяет, является ли  arr  массивом.\r\nОбратите внимание, что методы  sort ,  reverse  и  splice  изменяют исходный массив.\r\n\r\n  */\r\n  //#endregion\r\n  //-----------------------------\r\n  //#region //!-------------- функции работы с массивом -----------------\r\n  let fruits = [];\r\n\r\n  console.group(\"********* стэк\");\r\n  // TODO Методы  push/pop  выполняются быстро, а методы  shift/unshift  – медленно.\r\n  fruits = [\"Яблоко\", \"Апельсин\", \"Груша\"];\r\n  console.log(fruits.pop()); // удаляем \"Груша\" и выводим его \r\n  console.log(fruits.push('Лимон'));\r\n  console.log(fruits); // 'Яблоко', 'Апельсин', 'Лимон'\r\n\r\n  console.log(fruits.shift()); // удаляем \"Яблоко\" и выводим его \r\n  console.log(fruits.unshift('Киви'));\r\n  console.log(fruits); // 'Киви', 'Апельсин', 'Лимон' \r\n  console.groupEnd();\r\n  console.log('--------------------');\r\n  const tstArr = [1, 2, 3, 4, false, ''];\r\n  tstArr[10] = 25;\r\n  console.log(tstArr[8]); //undefined\r\n  console.log(tstArr); // [ 1, 2, 3, 4, false, '', <4 empty items>, 25 ]\r\n  console.log(tstArr.length); // 11\r\n  console.log('Фильтр только true values', tstArr.filter(Boolean));\r\n  const people = [\r\n    { name: 'test1', id: 1, email: 'test1@test.com' },\r\n    { name: 'test2', id: 2, email: 'test2@test.com' },\r\n    { name: 'test3', id: 3, email: 'test3@test.com' },\r\n    { name: 'test4', id: 4, email: 'test3@test.com' }\r\n  ];\r\n\r\n  const person2 = people.find(person => person.id === 2);\r\n  //console.log(person2); // { name: \"test2\", id: 2, email: \"test2@test.com\"}\r\n\r\n  const numbers = [1, 2, 3, 4, 10];\r\n  numbers.findIndex(x => x === 4); // returns 3\r\n  console.log(numbers.find(x => x === 10));     // returns -1\r\n  console.log('********* map - ', numbers.map(num => {\r\n    return num * 2;\r\n  }))\r\n\r\n  const cars = ['BMW', 'Toyota', 'Tesla', 'Audi', 'Renault', 'Skoda'];\r\n  console.log(cars.includes('Toyota'));  // true\r\n  console.log(cars.includes('mercedes')); // false\r\n\r\n  let newCarsArray = [...cars];\r\n  console.log(newCarsArray);// ['BMW', 'Toyota', 'Tesla', 'Audi']\r\n\r\n  const array1 = [1, 2, 4];\r\n  const array2 = [3, 5];\r\n  const array3 = [...array1, ...array2];\r\n  console.log(array3);// [ 1, 2, 4, 3, 5 ]\r\n  console.log('********* slice - ', cars.slice(2, 4)); //со 2-го по 4-й не включая\r\n\r\n  for (const iterator of array2) {\r\n    console.log(iterator);\r\n  }\r\n\r\n  //----------------------------------------------------------\r\n  const dogs = [\r\n    {\r\n      id: 'dog-1',\r\n      name: 'Poodle',\r\n      temperament: [\r\n        'Intelligent',\r\n        'Active',\r\n        'Alert',\r\n        'Faithful',\r\n        'Trainable',\r\n        'Instinctual',\r\n      ],\r\n    },\r\n    {\r\n      id: 'dog-2',\r\n      name: 'Bernese Mountain Dog',\r\n      temperament: ['Affectionate', 'Intelligent', 'Loyal', 'Faithful'],\r\n    },\r\n    {\r\n      id: 'dog-3',\r\n      name: 'Labrador Retriever',\r\n      temperament: [\r\n        'Intelligent',\r\n        'Even Tempered',\r\n        'Kind',\r\n        'Agile',\r\n        'Outgoing',\r\n        'Trusting',\r\n        'Gentle',\r\n      ],\r\n    },\r\n  ];\r\n  console.log(dogs.find(dog => dog.name === 'Bernese Mountain Dog'));\r\n  console.log(dogs.some(dog => dog.temperament.includes('Aggressive')));\r\n  console.log(dogs.some(dog => dog.temperament.includes('Trusting')));\r\n  console.log(dogs.every(dog => dog.temperament.includes('Trusting')));\r\n  console.log(dogs.every(dog => dog.temperament.includes('Intelligent')));\r\n  console.log(dogs.map(dog => dog.name));\r\n  console.log(dogs.filter(dog => dog.temperament.includes('Faithful')));\r\n  console.log('dogs.reduce - ', dogs.reduce((allTemperaments, dog) => {\r\n    return [...allTemperaments, ...dog.temperament];\r\n  }, []));\r\n\r\n  console.log([1, 7, 11].map(parseInt));\r\n  console.log([1, 7, 11].map((num) => parseInt(num)));\r\n  [1, 7, 11].map(console.log); //parseInt() принимает только два аргумента: число и сист. исчисления\r\n  //#endregion\r\n\r\n  //#region //!------------------------ многомерный массив в одномерный\r\n  console.group(\"********** многомерный массив в одномерный\")\r\n  let courses = [\r\n    {\r\n      subject: \"math\",\r\n      numberOfStudents: 3,\r\n      waitlistStudents: 2,\r\n      students: ['Janet', 'Martha', 'Bob', ['Phil', 'Candace']]\r\n    },\r\n    {\r\n      subject: \"english\",\r\n      numberOfStudents: 2,\r\n      students: ['Wilson', 'Taylor']\r\n    },\r\n    {\r\n      subject: \"history\",\r\n      numberOfStudents: 4,\r\n      students: ['Edith', 'Jacob', 'Peter', 'Betty']\r\n    }\r\n  ];\r\n  let courseStudents = courses.map(course => course.students);\r\n  console.log(courseStudents);\r\n  let flattenOneLevel = courseStudents.flat(Infinity); //flat()==flat(1) \r\n  console.log(flattenOneLevel);\r\n  console.groupEnd();\r\n  //#endregion\r\n  //---------------\r\n  const matrix = Array.from(Array(5), () => Array(10).fill());\r\n  const matrix1 = Array(...Array(5)).map(() => Array(...Array(10)));\r\n  const matrix2 = new Array(5, new Array(10));\r\n  const matrix3 = Array(...Array(5)).map(() => '');\r\n  matrix[1][1] = 44;\r\n  matrix1[1][1] = 33;\r\n  matrix2[1][1] = 33;\r\n  console.log('matrix - ', matrix);\r\n  console.log('matrix1 - ', matrix1);\r\n  console.log('matrix2 - ', matrix2);\r\n  console.log('matrix3 - ', matrix3);\r\n  console.log(matrix[0][7]);\r\n  console.warn(matrix2[0][7] || 'FAS: matrix2[0][7]  не найден!');\r\n\r\n  //#region // !-------------------------- flatMap на малых объемах быстрее reduce\r\n  console.group(\"*********** flatMap на малых объемах быстрее reduce\");\r\n  const arr = Array(100).fill(0).map((v, i) => i);\r\n  //console.log(arr);\r\n  console.time('reduce');\r\n  const arr1 = arr.reduce((result, current) => (result.push(current * current), result), []);\r\n  console.timeEnd('reduce');\r\n  //console.log(arr1);\r\n\r\n  console.time('flatMap');\r\n  const arr2 = arr.flatMap(current => [current * current]);\r\n  console.timeEnd('flatMap');\r\n  //console.log(arr2);\r\n\r\n  console.time('map');\r\n  const arr3 = arr.map(current => current * current);\r\n  console.timeEnd('map');\r\n  //console.log(arr3);\r\n  console.groupEnd();\r\n  //#endregion\r\n\r\n  //#region // !------------Объединение массивов и удаление дублей\r\n  console.group(\"************* Объединение массивов и удаление дублей\");\r\n  console.log('Простейшее удаление дублей - ', [...new Set([1, 2, 3, 3])]);\r\n  let longest = function (s1, s2) {\r\n    return Array.from(new Set([...s1, ...s2])).sort().join('').toString();\r\n  };\r\n\r\n  console.log(longest(\"xyaabbbccccdefww\", \"xxxxyyyyabklmopq\"));\r\n  let arrNew = longest(\"xyaabbbccccdefww\", \"xxxxyyyyabklmopq\").split('');\r\n  arrNew.splice(1, 0, [\"___\"]);\r\n  console.log(arrNew.join(''));\r\n\r\n  console.log('Reduce - ', [0, 1, 2, 3, 4, 10].reduce((prev, curr, index, array) => prev + curr)); //array summation\r\n  console.groupEnd();\r\n  //#endregion\r\n\r\n  // !------------------------ реализация array map\r\n  function map(arr, mapCallback) {\r\n    // проверяем переданные параметры\r\n    if (!Array.isArray(arr) || !arr.length || typeof mapCallback !== 'function') {\r\n      return []\r\n    } else {\r\n      let result = []\r\n      // мы создаем массив с результатами при каждом вызове функции\r\n      // поскольку мы не хотим менять оригинальный массив\r\n      for (let i = 0, len = arr.length; i < len; i++) {\r\n        result.push(mapCallback(arr[i], i, arr))\r\n        // помещаем результаты mapCallback в result\r\n      }\r\n      return result\r\n    }\r\n  }\r\n  console.log('********* реализация array map - ', map([true, 2, '4', 7, '3'], (e) => +e));\r\n  // !------------------------ реализация array filter\r\n  function filter(arr, filterCallback) {\r\n    // проверяем передаваемые параметры\r\n    if (!Array.isArray(arr) || !arr.length || typeof filterCallback !== 'function') {\r\n      return []\r\n    } else {\r\n      let result = []\r\n      // ...\r\n      for (let i = 0, len = arr.length; i < len; i++) {\r\n        // определяем соответствие возвращаемого результата заданному условию\r\n        if (filterCallback(arr[i], i, arr)) {\r\n          // помещаем значение, прошедшее фильтр, в result\r\n          result.push(arr[i])\r\n        }\r\n      }\r\n      return result\r\n    }\r\n  }\r\n  console.log('********* реализация array filter - ', filter([true, 2, '4', 7, '3', 33], (e) => typeof e === 'number'));\r\n  // !------------------------ реализация array reduce\r\n  function reduce(arr, reduceCallback, initialValue) {\r\n    // ..\r\n    if (!Array.isArray(arr) || !arr.length || typeof reduceCallback !== 'function') {\r\n      console.log('=========');\r\n      return []\r\n    } else {\r\n      // если в функцию не было передано значения initialValue, то\r\n      let hasInitialValue = initialValue !== undefined\r\n      let value = hasInitialValue ? initialValue : arr[0]\r\n      // мы будем использовать первый элемент initialValue\r\n      // затем мы перебираем массив, начиная с 1, если в функцию не передавалось значения initialValue, либо с 0, если значение было передано\r\n      for (let i = hasInitialValue ? 0 : 1, len = arr.length; i < len; i++) {\r\n        // затем на каждой итерации мы присваиваем результат вызова reduceCallback переменной\r\n        value = reduceCallback(value, arr[i], i, arr)\r\n      }\r\n      return value\r\n    }\r\n  }\r\n  let sum = 0;\r\n  console.log('********* реализация array reduce - ', reduce([1, 2, 4, 7, 3], (sum, e) => sum + e, 0));\r\n  // !------------------------ object in array and back\r\n  console.group(\"********* object in array and back\");\r\n  let students = {\r\n    amelia: 20,\r\n    beatrice: 22,\r\n    cece: 20,\r\n    deirdre: 19,\r\n    eloise: 21\r\n  };\r\n  console.log(students);\r\n  // преобразуем объект в массив для того чтобы воспользоваться методом .filter()\r\n  let overTwentyOne = Object.entries(students).filter(([name, age]) => {\r\n    return age >= 21;\r\n  });\r\n  console.log(overTwentyOne);\r\n  // преобразуем многомерный массив обратно в объект\r\n  const drinkingAgeStudents = Object.fromEntries(overTwentyOne);\r\n  console.log(drinkingAgeStudents);\r\n  console.groupEnd();\r\n  // ! ************************ sort array ********************\r\n  console.group(\"********* sort array\");\r\n  const rows = [\r\n    {\r\n      name: 'Larry',\r\n      website: 'google.com',\r\n      topic: '42',\r\n      year: 1998\r\n    },\r\n    {\r\n      name: 'Zsolt',\r\n      website: 'devcareermastery.com',\r\n      topic: 'IT Career',\r\n      year: 2016\r\n    },\r\n    {\r\n      name: 'Zsolt',\r\n      website: 'zsoltnagy.eu',\r\n      topic: 'JavaScript',\r\n      year: 2015\r\n    }\r\n  ];\r\n\r\n  console.log(rows.sort(({ name: first }, { name: second }) => {\r\n    if (first > second) return 1;\r\n    if (first < second) return -1;\r\n    return 0;\r\n  }));\r\n  console.log(rows.sort((x, y) => x.year - y.year));\r\n  console.groupEnd();\r\n  const arrNum = [4, 6, 19, 34, 32];\r\n  console.log(arrNum.sort()); //[ 19, 32, 34, 4, 6 ] // ! сортирует как строки\r\n  //--------------\r\n\r\n}\r\n","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\constructions.js",["133"],"'use strict'\r\n{\r\n  //import * as fs from 'fs';\r\n  /*  const read = async function (fname) {\r\n      return new Promise((resolve, reject) => {\r\n        readFile(fname, (err, content) => {\r\n          if (err) return reject(err);\r\n          resolve(content.toString());\r\n        });\r\n      });\r\n    }\r\n  \r\n      (async () => {\r\n        let files = ['file1.json', 'file2.json'];\r\n  \r\n        for (let i = 0; i < files.length; i++) {\r\n          let fcontent = await read(files[i]);\r\n          console.log(fcontent);\r\n          console.log(\"-------\");\r\n        }\r\n      })();\r\n  */\r\n  //------- возведение в степень\r\n  console.group(\"********возведение в степень********\");\r\n  console.log(2 ** 2); // 4\r\n  console.log(3 ** 2); // 9\r\n  console.log(3 ** 3); // 27\r\n  console.groupEnd();\r\n  //------- консольная таблица\r\n  console.group(\"********console.table********\");\r\n  console.table({ a: 5, b: 'sdff' })\r\n  console.groupEnd();\r\n  //------- функции\r\n  const add = a => b => a + b;\r\n  console.log(add(3)(5));\r\n  //------- array\r\n  console.group(\"********array********\");\r\n  //Array.prototype.includes : (match: any, offset?: Int) => boolean\r\n  const arrr = [1, 2, 3, 4, 6, 8];\r\n  console.log(arrr.includes(2));  //true\r\n  console.log(arrr.includes(2, 3));  //false\r\n  console.groupEnd();\r\n  //------- closures (замыкания)\r\n  console.group(\"********closures********\");\r\n  var globalVar = 'global'\r\n  var outerVar = 'outer'\r\n\r\n  function outerFunc(outerParam) {\r\n    function innerFunc(innerParam) {\r\n      console.log(\"Closures - \", globalVar, outerParam, innerParam)\r\n    }\r\n    return innerFunc\r\n  }\r\n\r\n  const x = outerFunc(outerVar)\r\n  outerVar = 'outer-2'\r\n  globalVar = 'guess'\r\n  x('inner')\r\n  console.groupEnd();\r\n  //------- function\r\n  console.group(\"********function********\");\r\n  //logParams самовызываемая ф-ция не доступная нигде \r\n  var logParams = (function (...params) {\r\n    params.forEach(element => {\r\n      console.log(element);\r\n    });\r\n  })('aa', 'bb', 'cc', 1, 2);\r\n  console.groupEnd();\r\n  //------- обход объекта\r\n  console.group(\"********обход объекта********\");\r\n  const myMap = {\r\n    uno: 1,\r\n    dos: 2,\r\n    tres: 3\r\n  };\r\n  for (let key in myMap) {\r\n    console.log(key, \"=\", myMap[key]);\r\n  }\r\n  for (let k in \"Hello!\") {\r\n    console.log(k);\r\n  }\r\n  for (let k of \"Hello!\") {\r\n    console.log(k);\r\n  }\r\n  function multiply(multiplier, ...theArgs) { return theArgs.map(x => multiplier * x); }\r\n  let arr = multiply(10, 1, 2, 3); console.log(arr); // [2, 4, 6]\r\n  console.groupEnd();\r\n  //-------Циклы\r\n  console.group(\"********do while********\");\r\n  let i = 0;\r\n  do {\r\n    console.log(i);\r\n    i++;\r\n  } while (i < 3);\r\n  console.groupEnd();\r\n  i = 0;\r\n  console.group(\"********while do********\");\r\n  while (i < 3) {\r\n    console.log(i);\r\n    i++;\r\n  }\r\n  console.groupEnd();\r\n  console.group(\"********for********\");\r\n  for (let index = 0; index < 4; index++) {\r\n    console.log(index);\r\n\r\n  }\r\n  console.groupEnd();\r\n  //------- множественный \r\n  let xX = 'value1';\r\n  switch (xX) {\r\n    case 'value1':\r\n      console.log('********switch - ', 'value1');\r\n      break;\r\n    case 'value2':\r\n      console.log('********switch - ', 'value2');\r\n      break;\r\n    default:\r\n      console.log('********switch - ', 'default');\r\n      break;\r\n  }\r\n  // ! Map, Set, WeakMap, WeakSet\r\n  function slice(str, start, end) {\r\n    return Array.from(str).slice(start, end).join('');\r\n  }\r\n\r\n  let str = '➸➸➸';\r\n\r\n  alert(slice(str, 1, 3)); // ➸➸ \r\n\r\n  // а вот встроенный метод не поддерживает суррогатные пары\r\n  alert(str.slice(1, 3)); // мусор (две части различных суррогатных пар)\r\n\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\control_loadjs.js",["134"],"function loadScript(src) {\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement('script')\r\n    script.async = false\r\n    script.src = src\r\n    script.addEventListener('load', resolve)\r\n    script.addEventListener('error', reject)\r\n\r\n    document.head.appendChild(script)\r\n  })\r\n}\r\n\r\n; (async () => {\r\n  try {\r\n    // ссылка на скрипт\r\n    const url = 'https://unpkg.com/react@16/umd/react.production.min.js'\r\n    await loadScript(url)\r\n\r\n    alert('загружено')\r\n  } catch (err) {\r\n    alert('ошибка')\r\n  }\r\n})()","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\dates.js",["135"],"'use strict'\r\n{\r\n  console.clear();\r\n  const myDate = \"26-02-2012\"; myDate = myDate.split(\"-\");\r\n  const newDate = myDate[1] + \"/\" + myDate[0] + \"/\" + myDate[2]; console.log((new Date(newDate).getTime()); //will alert 1330210800000\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\DOM.js",[],"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\functions.js",["136"],"'use strict';\r\n{\r\n  // ! обязательные параметры функции\r\n  console.group(\"************** обязательные параметры функции\");\r\n\r\n  const isRequired = () => { throw new Error(`param is required`); };\r\n\r\n  const hello = (name = isRequired()) => { console.log(`hello ${name}`) };\r\n\r\n  // *Эти варианты вызова функции будут работать нормально\r\n  hello(null);\r\n  hello('David');\r\n  // *Тут будет выдана ошибка, функции не передан аргумент name\r\n  //hello();\r\n  // *Здесь тоже будет ошибка\r\n  //hello(undefined);\r\n  console.groupEnd();\r\n\r\n  // ! Разбор строк запросов\r\n  console.group(\"************** Разбор строк запросов\");\r\n  // Предполагается, что мы работаем с \"?post=1234&action=edit\"\r\n  var urlParams = new URLSearchParams(\"?post=1234&action=edit\");//window.location.search);\r\n\r\n  console.log(urlParams.has('post')); // true\r\n  console.log(urlParams.get('action')); // \"edit\"\r\n  console.log(urlParams.getAll('action')); // [\"edit\"]\r\n  console.log(urlParams.toString()); // \"?post=1234&action=edit\"\r\n  console.log(urlParams.append('active', '1')); // \"?post=1234&action=edit&active=1\"\r\n  console.groupEnd();\r\n  // ! Комрозиция\r\n  console.group(\"************* Комрозиция\");\r\n  const compose = (...fns) => x => fns.reduceRight((acc, fn) => (console.log(fn.toString(), acc), fn(acc)), x);\r\n  const lowerCase = str => str.toLowerCase();\r\n  const join = separator => xs => xs.join(separator);\r\n  const map = fn => xs => xs.map(fn);\r\n  const split = pattern => str => str.split(pattern);\r\n\r\n  const bookTitles = [\r\n    \"JavaScript The Good Parts\",\r\n    \"You Don’t Know JS\",\r\n    \"Eloquent JavaScript\"\r\n  ];\r\n\r\n  const slugify = map(\r\n    compose(\r\n      join(\"-\"),\r\n      split(\" \"),\r\n      lowerCase\r\n    )\r\n  );\r\n  console.log(slugify(bookTitles)); // [\"javascript-the-good-parts\", \"you-don’t-know-js\", \"eloquent-javascript\"]\r\n  console.groupEnd();\r\n\r\n  /* //! Задержка при наступлении события \r\n  * (обычно используется в серии однотипных событий - mousemove, dragover и т.д.)\r\n  * Примерно посмотреть что это можно здесь - http://demo.nimius.net/debounce_throttle/\r\n  */\r\n  function holdBeforeFired(funcToFire, holdTime) {\r\n\r\n    let hold = false, _this, _arguments;\r\n\r\n    return function action() {\r\n      if (hold) { _this = this; _arguments = arguments; return; }\r\n\r\n      hold = true;\r\n      funcToFire.apply(this, arguments);\r\n\r\n      setTimeout(() => {\r\n        hold = false;\r\n        if (_arguments) {\r\n          action.apply(_this, _arguments);\r\n          _this = _arguments = null;\r\n        }\r\n      }, holdTime);\r\n    }\r\n  }\r\n  // ! Перегрузка функций \r\n  // ? подход под воросом!!!\r\n  function addMethod(object, name, fn) {\r\n    var old = object[name];\r\n    object[name] = function () {\r\n      if (fn.length == arguments.length)\r\n        return fn.apply(this, arguments);\r\n      else if (typeof old == 'function')\r\n        return old.apply(this, arguments);\r\n    };\r\n  }\r\n  // Примеры вызова перегруженной функции:\r\n  function Users() {\r\n    addMethod(this, \"find\", function () {\r\n      console.log('Find all users...');\r\n    });\r\n    addMethod(this, \"find\", function (name) {\r\n      console.log('Find a user by ' + name)\r\n    });\r\n    addMethod(this, \"find\", function (first, last) {\r\n      console.log('Find a user by ' + first + ' and ' + last)\r\n    });\r\n  }\r\n  // Пример вызовов\r\n  var users = new Users();\r\n  users.find(); // Finds all\r\n  users.find(\"John\"); // Finds users by name\r\n  users.find(\"John\", \"Resig\"); // Finds users by first and last name\r\n  users.find(\"John\", \"E\", \"Resig\"); // Does nothing\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\Iterator_generator.js",["137","138","139","140"],"'use strict'\r\n{\r\n  console.clear();\r\n  //! -------Итераторы\r\n  console.group(\"*********** Итераторы\")\r\n  var arr = [11, 12, 13];\r\n  var itr = arr[Symbol.iterator]();\r\n  console.log(itr.next()); // { value: 11, done: false }\r\n  console.log(itr.next()); // { value: 12, done: false }\r\n  console.log(itr.next()); // { value: 13, done: false }\r\n  console.log(itr.next()); // { value: undefined, done: true }\r\n  // --- итератор сам объект \r\n  /* \r\n  не можем использовать этот объект в двух\r\n  параллельных циклах  for..of : у них будет общее текущее состояние итерации, потому\r\n  что теперь существует лишь один итератор – сам объект\r\n  */\r\n  const collection = {\r\n    a: 10,\r\n    b: 20,\r\n    c: 30,\r\n    [Symbol.iterator]() {\r\n      const values = Object.keys(this);\r\n      let i = 0;\r\n      return {\r\n        next: () => {\r\n          return {\r\n            value: this[values[i++]],\r\n            done: i > values.length\r\n          }\r\n        }\r\n      };\r\n    }\r\n  };\r\n  const iterator11 = collection[Symbol.iterator]();\r\n  console.log(iterator11.next());    // → {value: 10, done: false}\r\n  console.log(iterator11.next());    // → {value: 20, done: false}\r\n  console.log(iterator11.next());    // → {value: 30, done: false}\r\n  console.log(iterator11.next());    // → {value: undefined, done: true}\r\n  //------------- итератор вне объекта\r\n  let range1 = {\r\n    from: 1,\r\n    to: 5\r\n  };\r\n\r\n  range1[Symbol.iterator] = function () {\r\n\r\n    // ...она возвращает объект итератора: \r\n    // 2. Далее, for..of работает только с этим итератором, запрашивая у него новые значения \r\n    return {\r\n      current: this.from,\r\n      last: this.to,\r\n\r\n      // 3. next() вызывается на каждой итерации цикла for..of \r\n      next() {\r\n        // 4. он должен вернуть значение в виде объекта {done:.., value :...} \r\n        if (this.current <= this.last) {\r\n          return { done: false, value: this.current++ };\r\n        } else {\r\n          return { done: true };\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n  // теперь работает!\r\n  for (let num of range1) {\r\n    console.log(num); // 1, затем 2, 3, 4, 5\r\n  }\r\n  console.groupEnd();\r\n  //! -------Генераторы\r\n  console.group(\"*********** Генераторы\")\r\n  const generatorFunction = function* () {\r\n    yield;\r\n  };\r\n  const iterator = generatorFunction();\r\n  console.log(iterator.next());// Object {value: undefined, done: false}\r\n  console.log(iterator.next());// Object {value: undefined, done: true}\r\n  //---\r\n  const generatorFunction1 = function* () {\r\n    console.log(yield); //bar\r\n    console.log(yield); //bar1\r\n  };\r\n  const iterator1 = generatorFunction1();\r\n  iterator1.next('foo');\r\n  iterator1.next('bar');\r\n  iterator1.next('bar1');\r\n  //---\r\n  const generatorFunction2 = function* () {\r\n    yield 1;\r\n    yield 2;\r\n    yield 3;\r\n    return 4;\r\n  };\r\n  const iterator2 = generatorFunction2();\r\n  const fromIterable = [...iterator2];\r\n  console.log(fromIterable); //[ 1, 2, 3 ]\r\n  //---\r\n  function* gener(i) {\r\n    yield i;\r\n    yield i * 2;\r\n  }\r\n  const gg = gener(10);\r\n  const gg1 = gener(100);\r\n  console.log(gg.next().value);\r\n  console.log(gg1.next().value);\r\n  console.log(gg.next().value);\r\n  console.log(gg1.next().value);\r\n  //----\r\n  const infiniteNumbers = function* () {\r\n    /*var n = 1;\r\n    while (true) {\r\n        yield n++;\r\n    }*/\r\n    yield* [1, 2, 3];\r\n  };\r\n  var numbers = infiniteNumbers(); // возвращает перебираемый объект\r\n  console.group(\"Генераторы\");\r\n  //do {} while (!numbers.next().done);\r\n  for (let value of infiniteNumbers()) {\r\n    console.log(value);\r\n  }\r\n  console.groupEnd();\r\n\r\n  const generateSequence = function* (start, end) {\r\n    for (let i = start; i <= end; i++) yield i;\r\n  };\r\n  const generateAlphaNum = function* () {\r\n    // 0..9\r\n    yield* generateSequence(48, 57);\r\n    // A..Z\r\n    yield* generateSequence(65, 90);\r\n    // a..z\r\n    yield* generateSequence(97, 122);\r\n  };\r\n\r\n  let str = \"\";\r\n  for (let code of generateAlphaNum()) {\r\n    str += String.fromCharCode(code);\r\n  }\r\n  console.log(str); // 0..9A..Za..z\r\n\r\n  var p = new Promise(function (resolve, reject) {\r\n    resolve(1);\r\n  });\r\n\r\n  var eventuallyAdd1 = val => {\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(resolve(val + 1), 2000);\r\n    });\r\n  };\r\n\r\n  p.then(eventuallyAdd1)\r\n    .then(eventuallyAdd1)\r\n    .then(val => console.log(val)); // 3\r\n\r\n  console.log(\"dfsdfsdfs\");\r\n\r\n  let generator = generateSequence(1, 5);\r\n  let value = generator.next();\r\n\r\n  while (!value.done) {\r\n    console.log(value.value);\r\n    value = generator.next();\r\n  }\r\n  console.groupEnd();\r\n  //-------Запуск последовательности callback-ов\r\n  const foo = (name, callback) => {\r\n    setTimeout(() => {\r\n      callback(name);\r\n    }, 1000);\r\n  };\r\n  /**\r\n  * Преобразует функцию, которая принимает несколько аргументов в\r\n  * функция, которая принимает только последний аргумент \r\n  * исходной функции.\r\n  *\r\n  * @param {Function}\r\n  * @param {...*}\r\n  */\r\n  const curry = (method, ...args) => {\r\n    return (callback) => {\r\n      args.push(callback);\r\n      return method.apply({}, args);\r\n    };\r\n  };\r\n  /**\r\n  * Инициирует генератор и выполняет итерацию по каждой \r\n  * предоставленной функции через оператора yield.\r\n  * \r\n  * @param {Function}\r\n  */\r\n  const controller = (generator) => {\r\n    const iterator = generator();\r\n    const advancer = (response) => {\r\n      // Advance the iterator using the response of an asynchronous callback.\r\n      const state = iterator.next(response);\r\n      if (!state.done) {\r\n        // Make the asynchronous function call the advancer.\r\n        state.value(advancer);\r\n      }\r\n    }\r\n    advancer();\r\n  };\r\n  controller(function* () {\r\n    const a = yield curry(foo, 'a');\r\n    const b = yield curry(foo, 'b');\r\n    const c = yield curry(foo, 'c');\r\n    console.log(a, b, c);\r\n  });\r\n\r\n  //---------- fibonacci\r\n  //Бесконечный ряд\r\n  function* fibonacci() {\r\n    let previous = 0\r\n    let i = 1;\r\n    while (true) {\r\n      [i, previous] = [previous, i + previous]\r\n      yield previous;\r\n    }\r\n  }\r\n  //взять первые n элементов последовательности\r\n  function* take(iterable, n) {\r\n    let i = 0;\r\n    for (let value of iterable) {\r\n      yield value;\r\n      i++;\r\n      if (i >= n) { break; }\r\n    }\r\n  }\r\n  //взять n-й элемент последовательности\r\n  function takeElem(iterable, n) {\r\n    let i = 0;\r\n    for (let value of iterable) {\r\n      i++;\r\n      if (i >= n) { return value; }\r\n    }\r\n  }\r\n  //const arrFib = [...take(fibonacci(), 30)];\r\n  //console.log(arrFib[29]);\r\n  console.log([...take(fibonacci(), 30)][29]);\r\n  console.log(takeElem(fibonacci(), 30));\r\n  //\r\n  const obj = {\r\n    a: 'aaaa',\r\n    b: Symbol(),\r\n    c: 125,\r\n    d: () => { return 'aaa' },\r\n    f: [1, 2, 3]\r\n  }\r\n  console.group(\"Цикл по св-ам объекта\");\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      console.log(obj[key]);\r\n    }\r\n  }\r\n  console.groupEnd();\r\n  console.group(\"Цикл по массиву\");\r\n  for (const key of obj.f) {\r\n    console.log(key);\r\n  }\r\n  console.groupEnd();\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\locales.js",["141"],"'use strict'\r\n{\r\n  const rtfEspanol = new Intl.RelativeTimeFormat('es', {\r\n    numeric: 'auto'\r\n  });\r\n  const rtfRussian = new Intl.RelativeTimeFormat('ru', {\r\n    numeric: 'auto'\r\n  });\r\n  console.log(rtfEspanol.format(5, 'day')); // dentro de 5 días\r\n  console.log(rtfEspanol.format(-5, 'day')); // hace 5 días\r\n  console.log(rtfEspanol.format(15, 'minute'));\r\n  console.log(rtfRussian.format(5, 'day'));\r\n  console.log(rtfRussian.format(-5, 'day'));\r\n  console.log(rtfRussian.format(15, 'minute'));\r\n  //-------------------------\r\n  var locales = ['en-US', 'ru', 'en-CA', 'ar-EG', 'ja-JP', 'pt-PT'];\r\n  const options = {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  };\r\n  var instance = new Intl.Collator('ru');\r\n  const date = new Date();\r\n\r\n  const formatter2 = new Intl.DateTimeFormat('en-us', options);\r\n  console.log(formatter2.format(date)); // December 22, 2017\r\n\r\n  const formatter1 = new Intl.DateTimeFormat('ru', options);\r\n  console.log(formatter1.format(date)); // 22 de diciembre de 2017\r\n  console.log(date.toLocaleString('ru', options));\r\n\r\n  var options1 = { localeMatcher: 'lookup' };\r\n  console.log(Intl.DateTimeFormat.supportedLocalesOf(locales, options1).join(', '));\r\n\r\n  /*  function squareDigits(num){\r\n    console.log(num.toString().split(''));\r\n    return parseInt(num.toString().split('').map((e) => Math.pow(e).toString()).join(''))\r\n  }\r\n  console.log(squareDigits(9119));\r\n  \r\n  \r\n  y = false, true; \r\n  console.log(y)\r\n  console.log((()=> {return false, true})()); \r\n  \r\n  \r\n  function accum(s) {\r\n    return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');\r\n  }\r\n  console.log(accum('abcd'));\r\n  \r\n  \r\n  function findOutlier(integers){\r\n      let arr = integers.map((elem) => elem % 2 == 0 ? 1 : 0)\r\n      if (arr.reduce((prev, curr) => prev+curr) === 1)\r\n        return integers[arr.indexOf(1)];\r\n      else\r\n        return integers[arr.indexOf(0)]\r\n    }\r\n    console.log(findOutlier([2,6,8,10,3]));*/\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\localization.js",[],"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\map_set.js",[],"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\notification.js",[],"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\objects.js",["142","143","144","145","146","147","148"],"'use strict'\r\n{\r\n  /** \r\n   * ! ключевое свойство, без него delete будет выдавать ошибку\r\n   * ? configurable: true  \r\n    'use strict'\r\n    const obj = {}  \r\n    Object.defineProperty(obj, 'best_site', { value: 'proghub', configurable: true });\r\n    console.log(obj.best_site);\r\n    delete obj.best_site;\r\n    console.log(obj.best_site);\r\n  */\r\n  console.clear();\r\n  let source =\r\n  {\r\n    a: 1,\r\n    b: {\r\n      c: 2,\r\n      e: 'sdsdsds'\r\n    },\r\n    d: 'comment',\r\n    courses: ['html', 'css', 'js'],\r\n    sayHi() { // ignored\r\n      console.log(\"Hello\");\r\n    },\r\n    [Symbol(\"id\")]: 123, // ignored\r\n  };\r\n  // ! *********** У объекта нет никаких свойств до тех пор, пока вы их в явном виде не добавите к нему\r\n  // !  dict.__proto__ === \"undefined\"\r\n  let dict = Object.create(null);\r\n  console.log(Object.getPrototypeOf(dict));\r\n  let dict1 = {};\r\n  console.log(Object.getPrototypeOf(dict1));\r\n  console.group(\"*********************** for on object\");\r\n  for (var i in source) {\r\n    console.log('key - ', i); // all keys\r\n    console.log('value - ', source[i]); // all values\r\n  }\r\n  console.groupEnd();\r\n  console.group(\"*********************** манипуляции с объектом\");\r\n  console.log('JSON.parse стандарт -', JSON.stringify(source));\r\n  let destObj = JSON.parse(JSON.stringify(source, [\"a\", \"b\"])); // вложенный объект не копируется\r\n  console.log('JSON.parse с параметрами - ', destObj);\r\n  console.log('JSON.parse с функцией - ', JSON.stringify(source, (key, value) => key === 'courses' ? 'массив' : value));\r\n  console.log('JSON.parse с форматированием - ', JSON.stringify(source, null, 2));\r\n  // копирование объекта\r\n  const original = { a: 1 };\r\n  const copyObject = Object.assign({}, original);\r\n  console.log('Копирование объекта - ', copyObject); // { a: 1};\r\n  console.groupEnd();\r\n  //слияние объектов\r\n  console.group(\"************ слияние объектов\");\r\n  const obj1 = {\r\n    a: 'a from obj1',\r\n    b: 'b from obj1',\r\n    c: ['c from obj1', 'c from obj1', 'c from obj1'],\r\n    d: {\r\n      e: 'e from obj1',\r\n      f: 'f from obj1',\r\n    },\r\n    w: ['1 from obj1', '2 from obj1', '3 from obj1'],\r\n  };\r\n\r\n  const obj2 = {\r\n    b: 'b from obj2',\r\n    c: 'c from obj2',\r\n    d: {\r\n      g: 'g from obj2',\r\n      h: { h1: 'h1 from obj2', h2: 'h2 from obj2' },\r\n    },\r\n    z: 'z from obj2',\r\n  };\r\n\r\n  let comObj = {};\r\n  Object.assign(comObj, obj1, obj2);\r\n  console.log('Слияние через assign - ', comObj);\r\n\r\n  const summary = { ...obj1, ...obj2 };\r\n  console.log('Слияние через ... - ', summary);\r\n  console.groupEnd();\r\n  //----------------------------------------------\r\n  let getCar = function (make, model, value) {\r\n    return {\r\n      // с синтаксисом короткой записи можно\r\n      // пропускать значение свойства, если оно\r\n      // совпадает с именем переменной, значение\r\n      // которой мы хотим использовать\r\n      make, // аналогично make: make\r\n      model, // аналогично model: model\r\n      value, // аналогично value: value\r\n\r\n      // вычисляемые свойства теперь работают в\r\n      // литералах объекта\r\n      [\"make\" + make]: true,\r\n\r\n      // Короткая запись метода объекта пропускает\r\n      // ключевое слово `function` и двоеточие. Вместо\r\n      // \"depreciate: function() {}\" можно написать:\r\n      depreciate() {\r\n        this.value -= 2500;\r\n      }\r\n    };\r\n  };\r\n  //Деструктуризация массивов и объектов\r\n  let foo = function () {\r\n    return [1, 2, 3];\r\n  };\r\n  let [a, b, c] = foo();\r\n  console.log(a, b, c); // 1 2 3\r\n  let car = getCar(\"Kia\", \"Sorento\", 40000);\r\n  car.depreciate();\r\n  console.log(car);\r\n  let bar = function () {\r\n    return {\r\n      x: 4,\r\n      y: 5,\r\n      z: 6\r\n    };\r\n  };\r\n  let { x: d, y: f, z: g } = bar();\r\n  console.log(d, f, g); // 4 5 6\r\n  //\r\n  var parent = {\r\n    foo() {\r\n      console.log(\"Привет от Родителя!\");\r\n    }\r\n  };\r\n\r\n  var child = {\r\n    foo() {\r\n      super.foo();\r\n      console.log(\"Привет от Ребёнка!\");\r\n    }\r\n  };\r\n\r\n  Object.setPrototypeOf(child, parent);\r\n  child.foo(); // Привет от Родителя!\r\n  // Привет от Ребёнка!\r\n\r\n  let user = \"Кевин\";\r\n  console.log(`Привет, ${user}!`); // Привет, Кевин!\r\n\r\n  let nicknames = [\"di\", \"boo\", \"punkeye\"];\r\n  nicknames.size = 3;\r\n  nicknames.arr = [\"asa\", \"sds\", \"dffd\"];\r\n  for (let nickname in nicknames) {\r\n    console.log(nickname);\r\n  }\r\n\r\n  class Task {\r\n    constructor() {\r\n      console.log(\"Создан экземпляр task!\");\r\n    }\r\n\r\n    showId() {\r\n      console.log(23);\r\n    }\r\n\r\n    static loadAll() {\r\n      console.log(\"Загружаем все tasks...\");\r\n    }\r\n  }\r\n\r\n  console.log(typeof Task); // function\r\n  let task = new Task(); // \"Создан экземпляр task!\"\r\n  task.showId(); // 23\r\n  Task.loadAll(); // \"Загружаем все tasks...\"\r\n  //----------------------------\r\n  const ladder = {\r\n    step: 0,\r\n    up() {\r\n      this.step++;\r\n      return this; // <--\r\n    },\r\n    down() {\r\n      this.step--;\r\n      return this; // <--\r\n    },\r\n    showStep() {\r\n      console.log(this.step);\r\n      return this; // <--\r\n    }\r\n  };\r\n  ladder.up().up().down().up().down().showStep(); // 1 \r\n  //-----------------------\r\n  let obj = {};\r\n  Object.defineProperty(obj, 'foo', { value: 1, writable: false });\r\n  console.log(obj.foo);\r\n\r\n  let objGet = { get foo() { return 17; } };\r\n  //objGet.foo = 2; //! ошибка TypeError: Cannot set property foo of #<Object> which has only a getter\r\n  console.log(objGet.foo);\r\n\r\n  let fixedObj = {};\r\n  Object.preventExtensions(fixedObj);\r\n  //fixedObj.bar = 1; // ! TypeError: Cannot add property bar, object is not extensible\r\n  console.log(fixedObj.bar);\r\n  // ------------Объединение объектов\r\n  const part1 = { id: 312, name: 'Пётр Иванов', arr: { key: 1, title: 'ddd', ind: [1, 2, 3] } }\r\n  const part2 = { id: 313, password: 'Пароль!' }\r\n\r\n  const user1 = { ...part1, ...part2 }\r\n  part2.password = 'dsdsds'\r\n  console.log(user1)\r\n  // ------------Исключаем свойства объекта\r\n  const noPassword = ({ password, ...rest }) => rest\r\n  console.log(noPassword(user1)); //=> { id: 312, name: 'Пётр Иванов' }\r\n  // ------------Динамическое исключение свойств\r\n  const removeProperty = prop => ({ [prop]: _, ...rest }) => rest\r\n  const removePassword = removeProperty('password')\r\n  const removeId = removeProperty('id')\r\n\r\n  console.log(removePassword(user1)) //=> { id: 312, name: 'Пётр Иванов' }\r\n  console.log(removeId(user1)) //=> { name: 'Пётр Иванов', password: 'Пароль!' }\r\n  // ------------Упорядочивание свойств\r\n  const user3 = {\r\n    password: 'Пароль!',\r\n    name: 'Артём',\r\n    id: 111\r\n  }\r\n  const organize = ({ id, password, ...object }) =>\r\n    ({ id, ...object, password });\r\n  console.log(organize(user3))\r\n  // ------------Переименование  свойств\r\n  const renamed = ({ id, ...object }) => ({ ID: id, ...object })\r\n  console.log(renamed(user3))\r\n  // ------------Добавление свойств с условием\r\n  const user4 = { id: 312, name: 'Пётр Иванов' }\r\n  const password = 'Пароль!'\r\n  const userWithPassword = {\r\n    ...user4,\r\n    id: 312,\r\n    ...(false && { password })\r\n  }\r\n  console.log(userWithPassword)\r\n  // ------------- rest\r\n  const obj11 = {\r\n    a: 10,\r\n    b: {\r\n      x: 20,\r\n      y: 30,\r\n      z: 40\r\n    }\r\n  };\r\n\r\n  const { b: { x, ...rest1 }, ...rest2 } = obj11;    // no error\r\n  //const { ...rest, ...rest2 } = obj11; // → SyntaxError: Rest element must be last element\r\n  console.groupEnd();\r\n  // ! будет одно поле - все к строковым ключам\r\n  let obj_1 = {\r\n    \"0\": 1,\r\n    0: 2,\r\n    false: 3,\r\n    null: 4,\r\n    'null': 5\r\n  }\r\n  console.log(obj_1[\"0\"] + obj_1[0] + obj_1['null']);\r\n  console.log(obj_1);\r\n  //---------------\r\n  class Something { }\r\n  const someObj = new Something();\r\n  console.log(typeof someObj == typeof Something); //false\r\n  console.log(typeof someObj); //object\r\n  console.log(typeof Something); //function\r\n  console.log(typeof obj_1);\r\n  //--------------------\r\n  let objTest = {\r\n    name: \"Джон\",\r\n    hi() { console.log(this); }\r\n  }\r\n\r\n  // разделим получение метода объекта и его вызов в разных строках\r\n  let hi = objTest.hi;\r\n  objTest.hi();\r\n  hi(); //this = undefine\r\n  hi.bind(objTest)(); //нормально\r\n\r\n  // ! объект к примитиву \r\n  console.group(\"************* объект к примитиву\")\r\n  let user11 = {\r\n    name: \"John\",\r\n    money: 1000,\r\n\r\n    [Symbol.toPrimitive](hint) {\r\n      console.log(`hint: ${hint}`);\r\n      return hint == \"string\" ? `{name: \"${this.name}\"}` : this.money;\r\n    },\r\n    // ! если не определена Symbol.toPrimitive будут работать нижние\r\n    // для хинта равного \"string\" \r\n    toString() {\r\n      return `{name(toString): \"${this.name}\"}`;\r\n    },\r\n    // для хинта равного \"number\" или \"default\" \r\n    valueOf() {\r\n      return this.money;\r\n    }\r\n\r\n  };\r\n\r\n  // демонстрация результатов преобразований:\r\n  console.log(user11); // hint не вызывается\r\n  console.log(String(user11)); // hint: string -> {name: \"John\"}\r\n  console.log(+user11); // hint: number -> 1000\r\n  console.log(user11 + 500); // hint: default -> 1500\r\n  console.groupEnd();\r\n\r\n}\r\n","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\patterns.js",["149"],"'use strict'\r\n{\r\n  // !----- случайное число\r\n  console.log(Math.floor(Math.random() * (10 + 1)));\r\n  console.log(Math.floor(Math.random() * 10) + 1);\r\n  function getRndInteger(min, max) { // оба включительно\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  console.log(getRndInteger(4, 7));\r\n  // ? вызывает 50 раз рандом\r\n  console.log(Array(...Array(50)).map(() => Math.floor(Math.random() * 10) + 1).join(','));\r\n\r\n  const all = (arr, fn = Boolean) => arr.every(fn);\r\n  const allEqual = arr => arr.every(val => val === arr[0]);\r\n  const approximatelyEqual = (v1, v2, epsilon = 0.001) => Math.abs(v1 - v2) < epsilon;\r\n  const arrayToCSV = (arr, delimiter = ',') =>\r\n    arr.map(v => v.map(x => `\"${x}\"`).join(delimiter)).join('\\n');\r\n  const deepFlatten = arr => [].concat(...arr.map(v => (Array.isArray(v) ? deepFlatten(v) : v)));\r\n  const average = (...nums) => nums.reduce((acc, val) => acc + val, 0) / nums.length;\r\n  const bifurcate = (arr, filter) =>\r\n    arr.reduce((acc, val, i) => (acc[filter[i] ? 0 : 1].push(val), acc), [[], []]);\r\n  const bifurcateBy = (arr, fn) =>\r\n    arr.reduce((acc, val, i) => (acc[fn(val, i) ? 0 : 1].push(val), acc), [[], []]);\r\n  const capitalize = ([first, ...rest], isRestLower = false) =>\r\n    first.toUpperCase() + (isRestLower ? rest.join('').toLowerCase() : rest.join(''));\r\n  const capitalizeEveryWord = str => str.replace(/\\b[a-z]/g, char => char.toUpperCase());\r\n\r\n  //console.log(os.type());// ! os доступно в Node.js\r\n  //---------------------  \r\n  console.log(capitalizeEveryWord('hello world!')); // 'Hello World!'\r\n  console.log(capitalize('fooBar')); // 'FooBar'\r\n  console.log(capitalize('fooBar', true)); // 'Foobar'\r\n  console.log(bifurcateBy(['beep', 'boop', 'foo', 'bar'], x => x[0] === 'b'));\r\n  console.log(bifurcate(['beep', 'boop', 'foo', 'bar'], [true, false, false, true]));\r\n  console.log(average(...[1, 2, 3])); // 2\r\n  console.log(average(1, 2, 3)); // 2\r\n  console.log(deepFlatten([1, [2], [[3], 4], 5])); // [1,2,3,4,5]\r\n  console.log(arrayToCSV([['a', 'b', 'c', 'd']])); // '\"a\",\"b\"\\n\"c\",\"d\"'\r\n  console.log(arrayToCSV([['a', 'b'], ['c', 'd']], ';')); // '\"a\";\"b\"\\n\"c\";\"d\"'\r\n  console.log(approximatelyEqual(Math.PI / 2.0, 1.5708, 0.00001)); // true\r\n  console.log(allEqual([1, 1, 3, 4, 5, 6])); // false\r\n  console.log(allEqual([1, 1, 1, 1])); // true\r\n  console.log(all([4, 2, 3], x => x > 1));\r\n\r\n  var f = ['🌑', '🌒', '🌓', '🌔', '🌝', '🌖', '🌗', '🌘'];\r\n  //var f = ['🕐', '🕑', '🕒', '🕓', '🕔', '🕕', '🕖', '🕗', '🕘', '🕙', '🕚', '🕛'];\r\n  const url = location.href;\r\n  function currentIni() {\r\n    let i = -1;\r\n    return () => i < f.length - 1 ? ++i : i = 0;\r\n  };\r\n  function loop() {\r\n    let i = current();\r\n    location.replace(url + '#' + f[i]);\r\n    console.log(i, f[i]);\r\n    setTimeout(loop, 400);\r\n  }\r\n  let current = currentIni();\r\n  loop();\r\n\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\promises.js",[],"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\promises1.js",["150","151"],"'use strict'\r\n{\r\n  //-------------------------------------------------\r\n  //************** */\r\n  //-------------------------------------------------\r\n  function chopCarrots() {\r\n    let k = 0;\r\n    for (let i = 0; i < 10000; i++) {\r\n      for (let j = 0; j < 10000; j++) {\r\n        k = Math.pow(k, i * j) / k\r\n      }\r\n    }\r\n    console.log(\"Done chopping carrots!\");\r\n  }\r\n\r\n  function chopOnions() {\r\n    let k = 0;\r\n    for (let i = 0; i < 10000; i++) {\r\n      for (let j = 0; j < 10000; j++) {\r\n        k = Math.pow(k, i * j) / k\r\n      }\r\n    }\r\n    console.log(\"Done chopping onions!\");\r\n  }\r\n\r\n  function addOnions() {\r\n    console.log('Add Onions to pot!');\r\n  }\r\n\r\n  function addCarrots() {\r\n    console.log('Add Carrots to pot!');\r\n  }\r\n\r\n  async function letPotKeepBoiling(time) {\r\n    return new Promise((resolve) => setTimeout(() => {\r\n      console.log(\"Pot has boiled for \", time, \" minutes\");\r\n      resolve();\r\n    }, time * 100));\r\n  }\r\n\r\n  async function boilPot() {\r\n    return new Promise((resolve) => setTimeout(() => {\r\n      console.log(\"Done boiling pot!\");\r\n      resolve();\r\n    }, 5000));\r\n  }\r\n\r\n  async function makeSoup() {\r\n    console.group(\"Варим суп\")\r\n    const pot = boilPot();\r\n    chopCarrots();\r\n    chopOnions();\r\n    await pot;\r\n    addCarrots();\r\n    await letPotKeepBoiling(5);\r\n    addOnions();\r\n    await letPotKeepBoiling(10);\r\n    console.log(\"Your vegetable soup is ready!\");\r\n    console.groupEnd();\r\n  }\r\n  //*** явные промисы\r\n  function makeSoup1() {\r\n    console.group(\"Варим другой суп\");\r\n    return Promise.all([\r\n      new Promise((reject, resolve) => {\r\n        chopCarrots();\r\n        chopOnions();\r\n        resolve();\r\n      }),\r\n      boilPot()\r\n    ])\r\n      .then(() => {\r\n        addCarrots();\r\n        return letPotKeepBoiling(5);\r\n      })\r\n      .then(() => {\r\n        addOnions();\r\n        return letPotKeepBoiling(10);\r\n      })\r\n      .then(() => {\r\n        console.log(\"Ваш овощной суп готов!\");\r\n        console.groupEnd();\r\n      });\r\n  }\r\n  //makeSoup();\r\n  //makeSoup1();\r\n\r\n  //------------------------------------------\r\n  const generateTypeableChars = async function* (chars) {\r\n    for (let i = 0; i < chars.length; i++) {\r\n      yield await new Promise(resolve =>\r\n        setTimeout(() => resolve(chars[i]), 350));\r\n    }\r\n  }\r\n  async function typeChars(chars) {\r\n    for await (let char of generateTypeableChars(chars)) {\r\n      console.log(char);\r\n    }\r\n  }\r\n  typeChars(['c', 'h', 'a', 'r', 's'])\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\regexp.js",["152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"'use strict'\r\n/*jshint esversion: 9 */\r\n{\r\n  //#region Исходные данные\r\n  const testString =\r\n    `sed do eiusmod tempor incididunt\r\nMangoJuice, JuiceVanillaShake, GrapeJuice, ullamco 221.58 sdfsdfsf\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\r\nsed do eiusmod tempor incididunt ut labore abc500 et dolore magna\r\naliqua. Ut enim ad minim veniam, 700abc quis nostrud exercitation\r\nullamco laboris nisi ut aliquip ex ea $400 commodo consequat.\r\nDuis aute irure dolor in $400 reprehenderit in voluptate velit\r\nesse cillum dolore eu fugiat nulla pariatur. Excepteur sint\r\noccaecat cupidatat non proident, sunt in culpa qui officia\r\ndeserunt mollit anim id https://sfol.cz est laborum.\r\n\r\nabcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n0123456789 _+-.,!@#$%^&*();\\/|<>\"'\r\n12345 -98.7 3.141 .6180 9,000 +42\r\n555.123.4567\t+1-(800)-555-2468\r\nfoo@demo.net\tbar.ba@test.co.uk\r\nwww.demo.com\thttp://foo.co.uk/\r\nhttps://marketplace.visualstudio.com/items?itemName=chrmarti.regex\r\nhttps://github.com/chrmarti/vscode-regex`;\r\n  //#endregion\r\n\r\n  console.clear();\r\n  //[a-z]+(?:([^a-z]+)[a-z]+(?:\\1)?[a-z]+)([^a-z]+)[a-z]+(?:\\2)?[a-z]+    \r\n  console.group(`****************  ^.*?(?=[\\+\\^#%&$\\*:<>\\?/\\{\\|\\}\\[\\]\\\\\\)\\(]).*$`);\r\n  const regHttp = new RegExp(/^.*?(?=[\\+\\^#%&$\\*:<>\\?/\\{\\|\\}\\[\\]\\\\\\)\\(]).*$/gm);\r\n  let m;\r\n  do {\r\n    m = regHttp.exec(testString);\r\n    if (m) {\r\n      console.log(m[0], '\\t\\t\\t\\t\\t\\tв позиции ', regHttp.lastIndex);\r\n    }\r\n  } while (m);\r\n  console.groupEnd();\r\n  console.group(`****************  /http(s:|:)\\/\\/(www.|ww2.|)([0-9a-z.A-Z-]*\\.\\w{2,3})/g`);\r\n\r\n  const reg1 = new RegExp(/http(s:|:)\\/\\/(www.|ww2.|)([0-9a-z.A-Z-]*\\.\\w{2,3})/g);\r\n  do {\r\n    m = reg1.exec(testString);\r\n    if (m) {\r\n      console.log(m[0]);\r\n    }\r\n  } while (m);\r\n  // console.log(reg1.exec(testString));\r\n  console.groupEnd();\r\n  console.group(\"************* функции RegExp\")\r\n  const reg = /^\\s*$\\n/g;\r\n  const reg2 = /([\\w0-9-._]+@[\\w0-9-.]+[\\w0-9]{2,3})/g;\r\n  console.log('Empty strings -', reg);\r\n  console.log('Url(domen) -', reg1);\r\n  console.log('Email -', reg2);\r\n  console.log('12-34-56'.replace(/-/g, \":\")); //заменяет все вхождения,  replace(\"-\", \":\") - только первое\r\n  /*\r\n    $$ \tвставляет \"$\"\r\n    $& \tвставляет всё найденное совпадение\r\n    $` \tвставляет часть строки до совпадения\r\n    $' \tвставляет часть строки после совпадения\r\n    $n \tесли n это 1-2 значное число, то вставляет содержимое n-й скобки\r\n    $<имя> \tвставляет содержимое скобки с указанным именем\r\n  */\r\n  console.log('убирает символы подряд > 2  - ', 'uuuuxxaaaaxuuu'.replace(/(\\w)\\1{2,}/g, '$1$1'));//uuxxaaxuu\r\n  console.log(\"John Smith\".replace(/(\\w+) (\\w+)/i, `$2, $1`));//Smith, John\r\n  console.info(\"html and css\".replace(/html|css/gi, str => str.toUpperCase()));\r\n  let strTest = \"Я люблю JavaScript\";\r\n  // эти два теста делают одно и же\r\n  console.log(/ЛЮБЛЮ/i.test(strTest)); // true\r\n  console.log(strTest.search(/люБлю/i) != -1);\r\n\r\n\r\n  console.groupEnd();\r\n  // ! опоставление с предыдущими символами\r\n  console.log(testString.match(/(?<=\\$)\\d+/)[0]); //400\r\n  //console.log(testString.match(/qua(?=i)/)[0] ?? 'NOT FOUND!!!');  //qu\r\n  console.log(testString.match(/(?<=abc)\\d+/)[0]); //500\r\n  const testRegExp = /[a-zA-Z]+(?=Juice)/g;\r\n  let matches = testString.match(testRegExp);\r\n  console.log(matches); // [\"Mango\", \"Grape\"]\r\n  const re = new RegExp(/ullamco (\\d+)\\.\\d*/);\r\n  console.log(re.exec(testString)[0]);\r\n  // ! Опережающие и ретроспективные проверки — (?=) and (?<=)\r\n  console.group(`**************** Опережающие и ретроспективные проверки`);\r\n\r\n  const found = testString.match(/la(?!m)/g);\r\n  console.log(found, found.length);\r\n  console.log('search - ', testString.search(/(?<=l)la(?=m)/))\r\n  const mAll = testString.matchAll(/la(?=m)/g);\r\n  Array.from(mAll).map(element => console.log(element[0], element.index));\r\n  console.groupEnd();\r\n  //---------------\r\n  const getNameParts = /(?<first>\\w+)\\s(?<last>\\w+)/g;\r\n  const subMatches = getNameParts.exec(testString);\r\n\r\n  const { first, last } = subMatches.groups\r\n  console.log(first);  // 'Weyland'\r\n  console.log(last);   //'Smithers'\r\n  // -------------------- поиск разделителей\r\n  const findSepar = function (str) {\r\n    let [, mod, elem] = str.match(/[a-z]+(?:([^a-z]+)[a-z]+(?:\\1)?[a-z]+)([^a-z]+)[a-z]+(?:\\2)?[a-z]+/);\r\n    const substringCount = (source, substr) => (source.match(new RegExp('[a-z]' + substr + '[a-z]', 'g')) || []).length;\r\n\r\n    if (substringCount(str, elem) === 2 && substringCount(str, mod) === 1) {\r\n      [mod, elem] = [elem, mod];\r\n    }\r\n    return { mod, elem };\r\n  }\r\n  console.log(findSepar('block_mod_mod__elem'))\r\n  // --------------Unicode Property Escapes\r\n  const str = '㉛';\r\n  const str1 = 'ض';\r\n  console.log(/\\d/u.test(str));    // → false\r\n  console.log(/\\p{Number}/u.test(str));     // → true\r\n  console.log(/\\p{Alphabetic}/u.test(str1)); // → true \r\n  console.log(/\\P{Number}/u.test(str));\r\n\r\n\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\strings.js",["180"],"'use strict'\r\n{\r\n  console.clear();\r\n  const testStr = 'MyTestingString';\r\n  console.log(testStr.slice(2, 8) + ' ' + testStr.substr(2, 8) + ' ' + testStr.substring(2, 8));//Testin TestingS Testin\r\n  /*\r\n    !     метод            |         выбирает…                       |            отрицательные значения\r\n    slice(start, end)      |  от  start  до  end(не включая  end)    |    можно передавать отрицательные значения\r\n    substring(start, end)  |  между  start  и  end                   |    отрицательные значения равнозначны  0\r\n    substr(start, length)  |  length  символов, начиная от  start    |    значение  start  может быть отрицательным\r\n  */\r\n  console.group(\"********** работа со строкой\");\r\n  const aa = 'AAA';\r\n  console.log(`Это длинная строка с //\\\\ - вывод спецсимвола\r\n  \"\"  ' с разными символами!@ — ŤŽĆ и переводом строки. \\${dffd}`);\r\n  console.log(`\\t\\tdfsdkfsfl fjsdlfsl ${aa} sdf`);\r\n  let className = 0.1 + 0.2;  // 0.30000000000000004\r\n  var num = 8;\r\n  var num = 10;\r\n  console.log(`box ${className.toFixed(1)}\r\n  dddd ${num}`);\r\n\r\n  const str = 'Hello world, welcome to the javascript.';\r\n  console.log(str.startsWith('Hello')); // true\r\n  console.log(str.startsWith('Help'));  // false\r\n  console.log(str.endsWith('javascript.')); // true\r\n  console.log(str.endsWith('hello'));       // false\r\n  console.log(str.includes(\"world\")); // true\r\n  console.log(str.includes(\"test\"));  // false\r\n\r\n  console.group(\"------ str.localeCompare(compareString[, locales[, options]])\")\r\n  console.log('Österreich' > 'Zealand'); // true\r\n  console.log('Österreich'.localeCompare('Zealand')); // -1 (false) \r\n  console.log('ř > r - ', 'ř'.localeCompare('r', 'en', { sensitivity: 'base' })); //0\r\n  console.log('ř > r - ', 'ř'.localeCompare('r', 'cs', { sensitivity: 'base' })); //1\r\n  console.log('ä > z - ', 'ä'.localeCompare('z', 'de')); // отрицательное значение: в немецком буква ä идёт рядом с буквой a\r\n  console.log('ä > z - ', 'ä'.localeCompare('z', 'sv')); // положительное значение: в шведском буква ä следует после буквы z\r\n  // В немецком буква a является базовой для буквы ä\r\n  console.log('ä > a - ', 'ä'.localeCompare('a', 'de', { sensitivity: 'base' })); // 0\r\n  // В шведском буквы ä и a являются двумя разными базовыми буквами\r\n  console.log('ä > a - ', 'ä'.localeCompare('a', 'sv', { sensitivity: 'base' })); // положительное значение\r\n  console.groupEnd();\r\n\r\n  let strCodes = '';\r\n  for (let i = 65; i <= 220; i++) {\r\n    strCodes += String.fromCodePoint(i);  // символ из кода\r\n  }\r\n  console.log(strCodes);\r\n  console.log('…'.codePointAt(0).toString(16)); // \\x2026 (8230)\r\n  console.log('S\\u0307\\u0323'); // Ṩ\r\n  console.log('S\\u0307\\u0323'.length); //3\r\n  console.log(\"S\\u0307\\u0323\".normalize().length); //1\r\n  console.log(\"S\\u0307\\u0323\".normalize() == \"S\\u0323\\u0307\".normalize())//true\r\n\r\n  console.log('⋨ [0] - ', '⋨'.charCodeAt(0).toString(16)); // d835, между 0xd800 и 0xdbff // ! ???\r\n  console.log('⋨ [1] - ', '⋨'.charCodeAt(1).toString(16)); // dcb3, между 0xdc00 и 0xdfff // ! ???\r\n\r\n  function truncate(str, maxlength) {\r\n    return (str.length > maxlength) ?\r\n      str.slice(0, maxlength - 1) + '…' : str; // '…' один символ\r\n  }\r\n  console.log(truncate(\"Вот, что мне хотелось бы сказать на эту тему:\", 30));\r\n\r\n  console.groupEnd();\r\n  //---- подстрока\r\n  console.group(\"********** подстрока\");\r\n  const str1 = '012345678901234567890abc';\r\n  console.log(str1.substr(1, 3));    //123\r\n  console.log(str1.substring(1, 3)); //12\r\n  console.log(str1.slice(1, 3));     //12\r\n  console.log(str1.slice(-3, -1));   //ab\r\n  console.groupEnd();\r\n  // ! ************ Вывод Юникод, hex символа \r\n  console.group('************ Вывод Юникод, hex символа');\r\n  console.log(\"\\u2764\\uFE0F\");\r\n  console.log(\"\\xAE\");\r\n  console.log('\\u{1D306}'); //ECMAScript 6: Unicode code point escapes\r\n  console.log(\"Ich \\u2665 B\\xFCcher\");\r\n  console.groupEnd();\r\n  // ! ********** Literals ********** /\r\n  console.group('********** Literals');\r\n  const olives = 0b0001;\r\n  const ham = 0b0010;\r\n  const pineapple = 0b0100;\r\n  const artechoke = 0b1000;\r\n\r\n  const pizza_ham_pineapple = pineapple | ham;\r\n  const pizza_four_seasons = olives | ham | artechoke;\r\n  console.log(pizza_ham_pineapple); //6\r\n  console.log(pizza_four_seasons);  //11\r\n  console.groupEnd();\r\n  // ! ********** Теговые шаблоны **********\r\n  console.group('********** Теговые шаблоны');\r\n  function template(strings, ...keys) {\r\n    return (function (...values) {\r\n      var dict = values[values.length - 1] || {};\r\n      var result = [strings[0]];\r\n      keys.forEach(function (key, i) {\r\n        var value = Number.isInteger(key) ? values[key] : dict[key];\r\n        result.push(value, strings[i + 1]);\r\n      });\r\n      return result.join('');\r\n    });\r\n  }\r\n\r\n  var t1Closure = template`${0}${1}${0}!`;\r\n  console.log(t1Closure('Y', 'A'));  // \"YAY!\"\r\n  var t2Closure = template`${0} ${'foo'}!`;\r\n  console.log(t2Closure('Hello', { foo: 'World' }));  // \"Hello World!\"\r\n  function latex(str) {\r\n    return { \"cooked\": str[0], \"raw\": str.raw[0] }\r\n  }\r\n\r\n  console.log(latex`Первый \r\n   \\unicode  yes`); // { cooked: undefined, raw: \"\\unicode\" }\r\n  console.groupEnd();\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\symbols.js",["181","182"],"'use strict';\r\n{\r\n  console.clear();\r\n  // ! **********  Symbol  *******\r\n  const symbol1 = Symbol('my symbol');\r\n  const symbol2 = Symbol();\r\n  console.log(symbol1 === symbol2); // false\r\n  //----------------- \r\n  const obj2 = {};\r\n  obj2[symbol1] = 'Hello';\r\n  obj2[symbol2] = 'World';\r\n\r\n  console.log(obj2[symbol1]);\r\n  console.log(obj2[symbol2]);\r\n  console.log(symbol1);\r\n  //----------------- \r\n  console.group('****** fibonacci');\r\n  const fibonacci = {\r\n    [Symbol.iterator]: function* () {\r\n      let a = BigInt(1);\r\n      let b = BigInt(1);\r\n      let temp;\r\n\r\n      yield b;\r\n\r\n      while (true) {\r\n        temp = a;\r\n        a = a + b;\r\n        b = temp;\r\n        yield b;\r\n      }\r\n    }\r\n  };\r\n\r\n  let arr1 = [];\r\n  let i = 0;\r\n  for (const x of fibonacci) {\r\n    i++;\r\n    if (i > 50) {\r\n      break;\r\n    }\r\n    arr1.push(x);\r\n  }\r\n  console.log(arr1.pop());\r\n  console.groupEnd();\r\n  //----------------- \r\n  console.group('****** Object и симвльные свойства');\r\n  const getObj = function getObj() {\r\n    const symbol = Symbol('test');\r\n    const obj = {};\r\n    obj[symbol] = 'test';\r\n    obj.aa = 10;\r\n    return obj;\r\n  };\r\n\r\n  const obj1 = getObj();\r\n  //----------------- \r\n  console.group('****** for .. in не выводит Symbol');\r\n  let id = Symbol(\"id\");\r\n  let user = {\r\n    name: \"Вася\",\r\n    age: 30,\r\n    [id]: 123\r\n  };\r\n  for (let key in user) console.log(key);\r\n  console.groupEnd();\r\n  console.log(Object.keys(obj1)); // []\r\n  //--------------------\r\n  console.log(obj1[Symbol('test')]); // undefined\r\n\r\n  // You can still get a reference to the symbol using `getOwnPropertySymbols()`\r\n  const [symbol] = Object.getOwnPropertySymbols(obj1);\r\n  console.log(obj1[symbol]); // 'test'\r\n  console.log(JSON.stringify(obj1));\r\n  console.groupEnd();\r\n  // ! ********** Глобальные символы\r\n  console.group('****** Глобальные символы');\r\n  // читаем символ из глобального реестра и записываем его в переменную\r\n  let gId = Symbol.for(\"global id\"); // если символа не существует, он будет создан \r\n  // читаем его снова в другую переменную (возможно, из другого места кода)\r\n  let gIdAgain = Symbol.for(\"global id\");\r\n  // проверяем -- это один и тот же символ\r\n  console.log(gId === gIdAgain); // true\r\n  console.log(Symbol.keyFor(gIdAgain)) // global id\r\n  //------\r\n  let globalSymbol = Symbol.for(\"name\");\r\n  let localSymbol = Symbol(\"name\");\r\n  console.log(Symbol.keyFor(globalSymbol)); // name, глобальный символ\r\n  console.log(Symbol.keyFor(localSymbol)); // undefined для неглобального символа \r\n  console.log(localSymbol.description); // name\r\n  console.groupEnd();\r\n  /*\r\n  Symbol.hasInstance\r\n  Symbol.isConcatSpreadable\r\n  Symbol.iterator\r\n  Symbol.toPrimitive\r\n  */\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\tasks\\dateCalc.js",["183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"function dateCalc() {\r\n\r\n\tvar oneday = 1000 * 60 * 60 * 24;\r\n\tvar oneweek = oneday * 7;\r\n\r\n\tvar D1 = getFieldFloatValue('D1');\r\n\tvar M1 = getFieldFloatValue('M1');\r\n\tvar Y1 = getFieldFloatValue('Y1');\r\n\r\n\tvar D2 = getFieldFloatValue('D2');\r\n\tvar M2 = getFieldFloatValue('M2');\r\n\tvar Y2 = getFieldFloatValue('Y2');\r\n\r\n\tvar Y = document.getElementById('Y');\r\n\tvar M = document.getElementById('M');\r\n\tvar D = document.getElementById('D');\r\n\tvar SS = document.getElementById('SS');\r\n\tvar DD = document.getElementById('DD');\r\n\tvar MIN = document.getElementById('MIN');\r\n\tvar HH = document.getElementById('HH');\r\n\tvar DD = document.getElementById('DD');\r\n\tvar WW = document.getElementById('WW');\r\n\tvar DD = document.getElementById('DD');\r\n\tvar YY = document.getElementById('YY');\r\n\r\n\tvar X1 = new Date (Y1,M1-1,D1);\r\n\tvar X2 = new Date (Y2,M2-1,D2);\r\n\t\r\n//\tvar N = ((X2.getTime() - X1.getTime()) / oneweek);\r\n// solve the years 0-99AC problem\r\n\tif (getFieldFloatValue('Y1')<100) YY1 = X1.getFullYear() - 1900;\r\n\t\telse YY1 = X1.getFullYear();\r\n\tif (getFieldFloatValue('Y2')<100) YY2 = X2.getFullYear() - 1900;\r\n\t\telse YY2 = X2.getFullYear();\r\n\r\n// calculate difference in years, months and days\r\n// years,...\r\n\tvar A = YY2-YY1;\r\n\tvar B = new Date (Y1+A,M1-1,D1);\r\n\tvar C = new Date (Y2,X2.getMonth(),0);\r\n\tvar F = new Date (Y2,M2-1,0);\r\n\r\nif (C.getDate()-X1.getDate() < 0) Z = 0;\r\nelse Z = C.getDate()-X1.getDate();\r\n\t\r\n\tif (X2.getTime() < X1.getTime()) {\r\n\tY.value = \"-\";\r\n\tM.value = \"-\";\r\n\tD.value = \"-\";\r\n\tSS.value = \"-\";\r\n\tMIN.value = \"-\";\r\n\tHH.value = \"-\";\r\n\tDD.value = \"-\";\r\n\tWW.value = \"-\";\r\n\tMM.value = \"-\";\r\n\tYY.value = \"-\";\r\n\t}\r\n\telse {\r\n\tif (X2.getTime() < B.getTime()) Y.value = A-1;\r\n\telse Y.value = A;\r\n\r\n// months,...\r\n\tvar Mx = X2.getMonth() - X1.getMonth()\r\n    + (12 * A);\r\n\r\n\tif (X2.getDate() < X1.getDate()){\r\n    Mx--;\r\n\t}\r\n\r\n\tif \t(X2.getMonth() - X1.getMonth() + (12 * A)>11) M.value = Mx - Y.value * 12;\r\n\telse M.value = Mx;\r\n\r\n// and days.\r\n\tif (X2.getDate() >= X1.getDate()) D.value = X2.getDate() - X1.getDate();\t\r\n\telse  D.value = (X2.getTime() - F.getTime()) / (oneday) + Z;\r\n\r\n// 86,400,000 (24×60×60×10×10×10) milliseconds — one day\r\n// 31,556,908,800 (86,400,000×365.242) milliseconds — one year\r\n\r\n// Calculate time differences\r\n\r\n\tSS.value = (X2.getTime() - X1.getTime())/1000;\r\n\tMIN.value = (X2.getTime() - X1.getTime())/(1000*60);\r\n\tHH.value = (X2.getTime() - X1.getTime())/(1000*60*60);\r\n\tDD.value = round((X2.getTime() - X1.getTime())/oneday,0);\r\n\tWW.value = round((X2.getTime() - X1.getTime())/oneweek,2);\r\n\tMM.value = X2.getMonth() - X1.getMonth() + (12 * A);\r\n\tif (X2.getDate() < X1.getDate()){\r\n    MM.value--;}\r\n\tif (X2.getTime() < B.getTime()) YY.value = A-1;\r\n\telse YY.value = A;\r\n\t}\r\n}\r\nfunction getFieldFloatValue(fieldId) {\r\n    return parseFloat(document.getElementById(fieldId).value.replace(\"\\,\",\".\"));\r\n}\r\nfunction round(n,dig)\r\n{\r\n\tX = n * Math.pow(10,dig);\r\n\tX = Math.round(X);\r\n\treturn X / Math.pow(10,dig);\r\n}\r\nfunction resetValues(form)\r\n{\r\n  for(var i = 0; i < form.elements.length; i++) {\r\n  if(form.elements[i].type == \"text\") { form.elements[i].value = \"\";}\r\n  }\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\tasks\\morse.js",["204","205","206","207"],"//'use strict'\r\n{\r\n  console.clear();\r\n  const MORSE_TABLE = {\r\n    '.-': 'a',\r\n    '-...': 'b',\r\n    '-.-.': 'c',\r\n    '-..': 'd',\r\n    '.': 'e',\r\n    '..-.': 'f',\r\n    '--.': 'g',\r\n    '....': 'h',\r\n    '..': 'i',\r\n    '.---': 'j',\r\n    '-.-': 'k',\r\n    '.-..': 'l',\r\n    '--': 'm',\r\n    '-.': 'n',\r\n    '---': 'o',\r\n    '.--.': 'p',\r\n    '--.-': 'q',\r\n    '.-.': 'r',\r\n    '...': 's',\r\n    '-': 't',\r\n    '..-': 'u',\r\n    '...-': 'v',\r\n    '.--': 'w',\r\n    '-..-': 'x',\r\n    '-.--': 'y',\r\n    '--..': 'z',\r\n    '.----': '1',\r\n    '..---': '2',\r\n    '...--': '3',\r\n    '....-': '4',\r\n    '.....': '5',\r\n    '-....': '6',\r\n    '--...': '7',\r\n    '---..': '8',\r\n    '----.': '9',\r\n    '-----': '0',\r\n  };\r\n\r\n  function decode(expr) {\r\n\r\n    const getSymbolMorse = (e) => {\r\n      let Res;\r\n      if (e.startsWith('*')) {\r\n        return ' ';\r\n      }\r\n      return MORSE_TABLE[e.match(/([01]){2}/g).map(replDigit).join('')];\r\n    }\r\n\r\n    const replDigit = (couple) => {\r\n      switch (couple) {\r\n        case '00':\r\n          return '';\r\n          break;\r\n        case '10':\r\n          return '.';\r\n          break;\r\n        case '11':\r\n          return '-';\r\n          break;\r\n      }\r\n    }\r\n    return expr.match(/([01*]){10}/g).map(getSymbolMorse).join('');\r\n  }\r\n\r\n  const expr = \"00101010100000000010001011101000101110100000111111**********00001011110000111111000010111000101110100000111010\";\r\n  console.log(decode(expr));\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\transformations.js",[],"D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\types.js",["208","209","210"],"'use strict'\r\n/* jshint esversion: 9 */\r\n{\r\n  // ! **********  BigInt  *******\r\n  const a = {};\r\n  const b = { key: \"b\" };\r\n  const c = { key: \"c\" };\r\n  a[b] = 123;\r\n  a[c] = 456;\r\n  console.log('' || 0, '-----');\r\n  //  console.log( 1_000_000_000.1_012 );   \r\n\r\n  const large = BigInt(9007199254740991);\r\n  const ad = BigInt(10);// можно и так 10n;\r\n  console.log(large + ad);\r\n  console.log(typeof large); // bigint\r\n  var obj = {\r\n    fn: function () {\r\n      console.log('this', this === obj); // true\r\n      console.log('globalThis', globalThis); // === windows in browser\r\n    }\r\n  };\r\n  obj.fn();\r\n  // ! **********  Number  *******\r\n  //--------------- все выражения истина\r\n  console.group('--- Number.isNaN');\r\n  console.log('Number.isNaN(NaN)', Number.isNaN(NaN) === true);\r\n  console.log('Number.isNaN(null)', Number.isNaN(null) === false);\r\n  console.log('Number.isNaN(undefined)', Number.isNaN(undefined) === false);\r\n  console.log('Number.isNaN({})', Number.isNaN({}) === false);\r\n  console.log('Number.isNaN(\\'0 / 0\\')', Number.isNaN('0/0') === false);\r\n  console.log('Number.isNaN(\\'hello\\')', Number.isNaN('hello') === false);\r\n  console.groupEnd();\r\n  /* //  ! браузер\r\n    console.group('--- window.isNaN');\r\n    console.log('window.isNaN(NaN)', window.isNaN(NaN) === true);\r\n    console.log('window.isNaN(null)', window.isNaN(null) === false);\r\n    console.log('window.isNaN(undefined)', window.isNaN(undefined) === true);\r\n    console.log('window.isNaN({})', window.isNaN({}) === true);\r\n    console.log('window.isNaN(\\'0 / 0\\')', window.isNaN('0/0') === true);\r\n    console.log('window.isNaN(\\'hello\\')', window.isNaN('hello') === true);\r\n    console.groupEnd();\r\n  */\r\n  console.group('--- функции');\r\n  console.log(isFinite(\"15\")); // true только если число\r\n  console.log(isFinite(0xFE)); //true\r\n  console.log(isFinite(\"\\u00A9\"));//false\r\n  console.log('\\u{20331} - ', isFinite('\\u{20331}')); //false\r\n  console.log(isFinite(Infinity)); //false\r\n  console.log(Object.is(NaN, NaN)); //true\r\n  console.log(Object.is(0, -0)); //false\r\n  console.groupEnd();\r\n}","D:\\_FAS\\Node\\_Examples\\JavaScript\\src\\_test.js",["211","212","213"],"'use strict'\r\n// @ts-check\r\n{\r\n  console.clear();\r\n  const o = {};\r\n\r\n  console.log(\"prop\" in o === o.hasOwnProperty(\"prop\"));\r\n  console.log(\"toString\" in o === o.hasOwnProperty(\"toString\"));\r\n\r\n  var obj = { a: 2 };\r\n  function f(aobj) {\r\n    aobj.a = 5;\r\n    console.log(aobj);\r\n    aobj = { a: 3 };\r\n    console.log(aobj);\r\n  }\r\n  f(obj);\r\n  console.log(obj);\r\n\r\n  console.log(1 / 0); //Infinity\r\n  console.log(parseInt(1 / 0, 19)); // 18==i\r\n\r\n  let itsAsEasyAs = 'abc'\r\n  itsAsEasyAs = 123;\r\n} ",{"ruleId":null,"fatal":true,"severity":2,"message":"214","line":8,"column":18},{"ruleId":"215","severity":2,"message":"216","line":6,"column":9,"nodeType":"217","endLine":6,"endColumn":13},{"ruleId":"218","severity":2,"message":"219","line":7,"column":5,"nodeType":"217","messageId":"220","endLine":7,"endColumn":9},{"ruleId":"221","severity":2,"message":"222","line":12,"column":10,"nodeType":"223","messageId":"224","endLine":12,"endColumn":14},{"ruleId":"218","severity":2,"message":"219","line":18,"column":51,"nodeType":"217","messageId":"220","endLine":18,"endColumn":55},{"ruleId":"215","severity":2,"message":"225","line":72,"column":9,"nodeType":"217","endLine":72,"endColumn":16},{"ruleId":"215","severity":2,"message":"226","line":194,"column":9,"nodeType":"217","endLine":194,"endColumn":13},{"ruleId":"215","severity":2,"message":"227","line":199,"column":9,"nodeType":"217","endLine":199,"endColumn":13},{"ruleId":"215","severity":2,"message":"228","line":204,"column":9,"nodeType":"217","endLine":204,"endColumn":13},{"ruleId":"215","severity":2,"message":"229","line":222,"column":68,"nodeType":"217","endLine":222,"endColumn":73},{"ruleId":"215","severity":2,"message":"230","line":222,"column":75,"nodeType":"217","endLine":222,"endColumn":80},{"ruleId":"215","severity":2,"message":"231","line":281,"column":7,"nodeType":"217","endLine":281,"endColumn":10},{"ruleId":"215","severity":2,"message":"232","line":294,"column":57,"nodeType":"217","endLine":294,"endColumn":61},{"ruleId":"215","severity":2,"message":"233","line":63,"column":7,"nodeType":"217","endLine":63,"endColumn":16},{"ruleId":"234","severity":2,"message":"235","line":13,"column":1,"nodeType":"236","messageId":"224","endLine":13,"endColumn":2,"fix":"237"},{"ruleId":null,"fatal":true,"severity":2,"message":"238","line":5,"column":107},{"ruleId":"215","severity":2,"message":"239","line":58,"column":12,"nodeType":"217","endLine":58,"endColumn":27},{"ruleId":"215","severity":2,"message":"240","line":117,"column":7,"nodeType":"217","endLine":117,"endColumn":14},{"ruleId":"215","severity":2,"message":"241","line":143,"column":42,"nodeType":"217","endLine":143,"endColumn":48},{"ruleId":"215","severity":2,"message":"241","line":148,"column":43,"nodeType":"217","endLine":148,"endColumn":49},{"ruleId":"242","severity":2,"message":"243","line":253,"column":13,"nodeType":"244"},{"ruleId":"215","severity":2,"message":"245","line":22,"column":7,"nodeType":"217","endLine":22,"endColumn":15},{"ruleId":"215","severity":2,"message":"246","line":206,"column":25,"nodeType":"217","endLine":206,"endColumn":33},{"ruleId":"215","severity":2,"message":"247","line":209,"column":45,"nodeType":"217","endLine":209,"endColumn":46},{"ruleId":"215","severity":2,"message":"248","line":246,"column":16,"nodeType":"217","endLine":246,"endColumn":17},{"ruleId":"215","severity":2,"message":"249","line":246,"column":22,"nodeType":"217","endLine":246,"endColumn":27},{"ruleId":"215","severity":2,"message":"250","line":246,"column":34,"nodeType":"217","endLine":246,"endColumn":39},{"ruleId":"251","severity":2,"message":"252","line":252,"column":5,"nodeType":"253","messageId":"224","endLine":252,"endColumn":6},{"ruleId":"251","severity":2,"message":"254","line":255,"column":5,"nodeType":"253","messageId":"224","endLine":255,"endColumn":11},{"ruleId":"234","severity":2,"message":"235","line":51,"column":4,"nodeType":"236","messageId":"224","endLine":51,"endColumn":5,"fix":"255"},{"ruleId":"215","severity":2,"message":"256","line":48,"column":18,"nodeType":"217","endLine":48,"endColumn":26},{"ruleId":"215","severity":2,"message":"257","line":62,"column":12,"nodeType":"217","endLine":62,"endColumn":21},{"ruleId":"258","severity":2,"message":"259","line":18,"column":16,"nodeType":"260","messageId":"261","endLine":18,"endColumn":17,"suggestions":"262"},{"ruleId":"258","severity":2,"message":"263","line":29,"column":44,"nodeType":"260","messageId":"261","endLine":29,"endColumn":45,"suggestions":"264"},{"ruleId":"258","severity":2,"message":"265","line":29,"column":46,"nodeType":"260","messageId":"261","endLine":29,"endColumn":47,"suggestions":"266"},{"ruleId":"258","severity":2,"message":"267","line":29,"column":52,"nodeType":"260","messageId":"261","endLine":29,"endColumn":53,"suggestions":"268"},{"ruleId":"258","severity":2,"message":"269","line":29,"column":57,"nodeType":"260","messageId":"261","endLine":29,"endColumn":58,"suggestions":"270"},{"ruleId":"258","severity":2,"message":"271","line":29,"column":60,"nodeType":"260","messageId":"261","endLine":29,"endColumn":61,"suggestions":"272"},{"ruleId":"258","severity":2,"message":"273","line":29,"column":62,"nodeType":"260","messageId":"261","endLine":29,"endColumn":63,"suggestions":"274"},{"ruleId":"258","severity":2,"message":"275","line":29,"column":64,"nodeType":"260","messageId":"261","endLine":29,"endColumn":65,"suggestions":"276"},{"ruleId":"258","severity":2,"message":"277","line":29,"column":66,"nodeType":"260","messageId":"261","endLine":29,"endColumn":67,"suggestions":"278"},{"ruleId":"258","severity":2,"message":"279","line":29,"column":68,"nodeType":"260","messageId":"261","endLine":29,"endColumn":69,"suggestions":"280"},{"ruleId":"258","severity":2,"message":"281","line":29,"column":72,"nodeType":"260","messageId":"261","endLine":29,"endColumn":73,"suggestions":"282"},{"ruleId":"258","severity":2,"message":"283","line":29,"column":74,"nodeType":"260","messageId":"261","endLine":29,"endColumn":75,"suggestions":"284"},{"ruleId":"258","severity":2,"message":"263","line":30,"column":39,"nodeType":"223","messageId":"261","endLine":30,"endColumn":40,"suggestions":"285"},{"ruleId":"258","severity":2,"message":"265","line":30,"column":41,"nodeType":"223","messageId":"261","endLine":30,"endColumn":42,"suggestions":"286"},{"ruleId":"258","severity":2,"message":"267","line":30,"column":47,"nodeType":"223","messageId":"261","endLine":30,"endColumn":48,"suggestions":"287"},{"ruleId":"258","severity":2,"message":"269","line":30,"column":52,"nodeType":"223","messageId":"261","endLine":30,"endColumn":53,"suggestions":"288"},{"ruleId":"258","severity":2,"message":"271","line":30,"column":55,"nodeType":"223","messageId":"261","endLine":30,"endColumn":56,"suggestions":"289"},{"ruleId":"258","severity":2,"message":"273","line":30,"column":57,"nodeType":"223","messageId":"261","endLine":30,"endColumn":58,"suggestions":"290"},{"ruleId":"258","severity":2,"message":"275","line":30,"column":59,"nodeType":"223","messageId":"261","endLine":30,"endColumn":60,"suggestions":"291"},{"ruleId":"258","severity":2,"message":"277","line":30,"column":61,"nodeType":"223","messageId":"261","endLine":30,"endColumn":62,"suggestions":"292"},{"ruleId":"258","severity":2,"message":"281","line":30,"column":67,"nodeType":"223","messageId":"261","endLine":30,"endColumn":68,"suggestions":"293"},{"ruleId":"258","severity":2,"message":"283","line":30,"column":69,"nodeType":"223","messageId":"261","endLine":30,"endColumn":70,"suggestions":"294"},{"ruleId":"258","severity":2,"message":"259","line":39,"column":47,"nodeType":"260","messageId":"261","endLine":39,"endColumn":48,"suggestions":"295"},{"ruleId":"258","severity":2,"message":"259","line":39,"column":49,"nodeType":"260","messageId":"261","endLine":39,"endColumn":50,"suggestions":"296"},{"ruleId":"258","severity":2,"message":"297","line":39,"column":78,"nodeType":"260","messageId":"261","endLine":39,"endColumn":79,"suggestions":"298"},{"ruleId":"258","severity":2,"message":"299","line":39,"column":80,"nodeType":"260","messageId":"261","endLine":39,"endColumn":81,"suggestions":"300"},{"ruleId":"301","severity":2,"message":"302","line":84,"column":46,"nodeType":"303"},{"ruleId":"301","severity":2,"message":"302","line":84,"column":48,"nodeType":"303"},{"ruleId":"304","severity":2,"message":"305","line":19,"column":7,"nodeType":"217","messageId":"306","endLine":19,"endColumn":10},{"ruleId":"218","severity":2,"message":"307","line":20,"column":15,"nodeType":"217","messageId":"220","endLine":20,"endColumn":21},{"ruleId":"218","severity":2,"message":"307","line":21,"column":15,"nodeType":"217","messageId":"220","endLine":21,"endColumn":21},{"ruleId":"215","severity":2,"message":"308","line":1,"column":10,"nodeType":"217","endLine":1,"endColumn":18},{"ruleId":"304","severity":2,"message":"309","line":21,"column":6,"nodeType":"217","messageId":"306","endLine":21,"endColumn":8},{"ruleId":"304","severity":2,"message":"309","line":23,"column":6,"nodeType":"217","messageId":"306","endLine":23,"endColumn":8},{"ruleId":"218","severity":2,"message":"310","line":31,"column":36,"nodeType":"217","messageId":"220","endLine":31,"endColumn":39},{"ruleId":"218","severity":2,"message":"310","line":32,"column":8,"nodeType":"217","messageId":"220","endLine":32,"endColumn":11},{"ruleId":"218","severity":2,"message":"311","line":33,"column":36,"nodeType":"217","messageId":"220","endLine":33,"endColumn":39},{"ruleId":"218","severity":2,"message":"311","line":34,"column":8,"nodeType":"217","messageId":"220","endLine":34,"endColumn":11},{"ruleId":"218","severity":2,"message":"311","line":38,"column":10,"nodeType":"217","messageId":"220","endLine":38,"endColumn":13},{"ruleId":"218","severity":2,"message":"310","line":38,"column":14,"nodeType":"217","messageId":"220","endLine":38,"endColumn":17},{"ruleId":"218","severity":2,"message":"312","line":43,"column":35,"nodeType":"217","messageId":"220","endLine":43,"endColumn":36},{"ruleId":"218","severity":2,"message":"312","line":44,"column":6,"nodeType":"217","messageId":"220","endLine":44,"endColumn":7},{"ruleId":"218","severity":2,"message":"313","line":55,"column":2,"nodeType":"217","messageId":"220","endLine":55,"endColumn":4},{"ruleId":"218","severity":2,"message":"312","line":75,"column":60,"nodeType":"217","messageId":"220","endLine":75,"endColumn":61},{"ruleId":"218","severity":2,"message":"313","line":87,"column":2,"nodeType":"217","messageId":"220","endLine":87,"endColumn":4},{"ruleId":"218","severity":2,"message":"313","line":89,"column":5,"nodeType":"217","messageId":"220","endLine":89,"endColumn":7},{"ruleId":"258","severity":2,"message":"314","line":95,"column":71,"nodeType":"223","messageId":"261","endLine":95,"endColumn":72,"suggestions":"315"},{"ruleId":"218","severity":2,"message":"316","line":99,"column":2,"nodeType":"217","messageId":"220","endLine":99,"endColumn":3},{"ruleId":"218","severity":2,"message":"316","line":100,"column":2,"nodeType":"217","messageId":"220","endLine":100,"endColumn":3},{"ruleId":"218","severity":2,"message":"316","line":100,"column":17,"nodeType":"217","messageId":"220","endLine":100,"endColumn":18},{"ruleId":"218","severity":2,"message":"316","line":101,"column":9,"nodeType":"217","messageId":"220","endLine":101,"endColumn":10},{"ruleId":"215","severity":2,"message":"317","line":103,"column":10,"nodeType":"217","endLine":103,"endColumn":21},{"ruleId":"215","severity":2,"message":"318","line":46,"column":11,"nodeType":"217","endLine":46,"endColumn":14},{"ruleId":"319","severity":2,"message":"320","line":57,"column":11,"nodeType":"321","endLine":57,"endColumn":17},{"ruleId":"319","severity":2,"message":"320","line":60,"column":11,"nodeType":"321","endLine":60,"endColumn":17},{"ruleId":"319","severity":2,"message":"320","line":63,"column":11,"nodeType":"321","endLine":63,"endColumn":17},{"ruleId":"218","severity":2,"message":"307","line":13,"column":17,"nodeType":"217","messageId":"220","endLine":13,"endColumn":23},{"ruleId":"218","severity":2,"message":"307","line":14,"column":14,"nodeType":"217","messageId":"220","endLine":14,"endColumn":20},{"ruleId":"218","severity":2,"message":"322","line":20,"column":33,"nodeType":"217","messageId":"220","endLine":20,"endColumn":43},{"ruleId":"242","severity":2,"message":"243","line":7,"column":33,"nodeType":"244"},{"ruleId":"242","severity":2,"message":"243","line":8,"column":37,"nodeType":"244"},{"ruleId":"215","severity":2,"message":"323","line":23,"column":7,"nodeType":"217","endLine":23,"endColumn":18},"Parsing error: Identifier directly after number","no-unused-vars","'var2' is assigned a value but never used.","Identifier","no-undef","'var4' is not defined.","undef","no-constant-condition","Unexpected constant condition.","Literal","unexpected","'person2' is assigned a value but never used.","'arr1' is assigned a value but never used.","'arr2' is assigned a value but never used.","'arr3' is assigned a value but never used.","'index' is defined but never used.","'array' is defined but never used.","'sum' is assigned a value but never used.","'name' is defined but never used.","'logParams' is assigned a value but never used.","no-extra-semi","Unnecessary semicolon.","EmptyStatement",{"range":"324","text":"325"},"Parsing error: Unexpected token ;","'holdBeforeFired' is defined but never used.","'numbers' is assigned a value but never used.","'reject' is defined but never used.","no-prototype-builtins","Do not access Object.prototype method 'hasOwnProperty' from target object.","CallExpression","'instance' is assigned a value but never used.","'password' is defined but never used.","'_' is defined but never used.","'x' is assigned a value but never used.","'rest1' is assigned a value but never used.","'rest2' is assigned a value but never used.","no-dupe-keys","Duplicate key '0'.","ObjectExpression","Duplicate key 'null'.",{"range":"326","text":"327"},"'makeSoup' is defined but never used.","'makeSoup1' is defined but never used.","no-useless-escape","Unnecessary escape character: \\/.","TemplateElement","unnecessaryEscape",["328","329"],"Unnecessary escape character: \\+.",["330","331"],"Unnecessary escape character: \\^.",["332","333"],"Unnecessary escape character: \\*.",["334","335"],"Unnecessary escape character: \\?.",["336","337"],"Unnecessary escape character: \\{.",["338","339"],"Unnecessary escape character: \\|.",["340","341"],"Unnecessary escape character: \\}.",["342","343"],"Unnecessary escape character: \\[.",["344","345"],"Unnecessary escape character: \\].",["346","347"],"Unnecessary escape character: \\).",["348","349"],"Unnecessary escape character: \\(.",["350","351"],["352","353"],["354","355"],["356","357"],["358","359"],["360","361"],["362","363"],["364","365"],["366","367"],["368","369"],["370","371"],["372","373"],["374","375"],"Unnecessary escape character: \\..",["376","377"],"Unnecessary escape character: \\w.",["378","379"],"no-irregular-whitespace","Irregular whitespace not allowed.","Program","no-redeclare","'num' is already defined.","redeclared","'BigInt' is not defined.","'dateCalc' is defined but never used.","'DD' is already defined.","'YY1' is not defined.","'YY2' is not defined.","'Z' is not defined.","'MM' is not defined.","Unnecessary escape character: \\,.",["380","381"],"'X' is not defined.","'resetValues' is defined but never used.","'Res' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","'globalThis' is not defined.","'itsAsEasyAs' is assigned a value but never used.",[313,321],"}\r\n\r\n (",[2668,2682],"}\r\n  function",{"messageId":"382","fix":"383","desc":"384"},{"messageId":"385","fix":"386","desc":"387"},{"messageId":"382","fix":"388","desc":"384"},{"messageId":"385","fix":"389","desc":"387"},{"messageId":"382","fix":"390","desc":"384"},{"messageId":"385","fix":"391","desc":"387"},{"messageId":"382","fix":"392","desc":"384"},{"messageId":"385","fix":"393","desc":"387"},{"messageId":"382","fix":"394","desc":"384"},{"messageId":"385","fix":"395","desc":"387"},{"messageId":"382","fix":"396","desc":"384"},{"messageId":"385","fix":"397","desc":"387"},{"messageId":"382","fix":"398","desc":"384"},{"messageId":"385","fix":"399","desc":"387"},{"messageId":"382","fix":"400","desc":"384"},{"messageId":"385","fix":"401","desc":"387"},{"messageId":"382","fix":"402","desc":"384"},{"messageId":"385","fix":"403","desc":"387"},{"messageId":"382","fix":"404","desc":"384"},{"messageId":"385","fix":"405","desc":"387"},{"messageId":"382","fix":"406","desc":"384"},{"messageId":"385","fix":"407","desc":"387"},{"messageId":"382","fix":"408","desc":"384"},{"messageId":"385","fix":"409","desc":"387"},{"messageId":"382","fix":"410","desc":"384"},{"messageId":"385","fix":"411","desc":"387"},{"messageId":"382","fix":"412","desc":"384"},{"messageId":"385","fix":"413","desc":"387"},{"messageId":"382","fix":"414","desc":"384"},{"messageId":"385","fix":"415","desc":"387"},{"messageId":"382","fix":"416","desc":"384"},{"messageId":"385","fix":"417","desc":"387"},{"messageId":"382","fix":"418","desc":"384"},{"messageId":"385","fix":"419","desc":"387"},{"messageId":"382","fix":"420","desc":"384"},{"messageId":"385","fix":"421","desc":"387"},{"messageId":"382","fix":"422","desc":"384"},{"messageId":"385","fix":"423","desc":"387"},{"messageId":"382","fix":"424","desc":"384"},{"messageId":"385","fix":"425","desc":"387"},{"messageId":"382","fix":"426","desc":"384"},{"messageId":"385","fix":"427","desc":"387"},{"messageId":"382","fix":"428","desc":"384"},{"messageId":"385","fix":"429","desc":"387"},{"messageId":"382","fix":"430","desc":"384"},{"messageId":"385","fix":"431","desc":"387"},{"messageId":"382","fix":"432","desc":"384"},{"messageId":"385","fix":"433","desc":"387"},{"messageId":"382","fix":"434","desc":"384"},{"messageId":"385","fix":"435","desc":"387"},{"messageId":"382","fix":"436","desc":"384"},{"messageId":"385","fix":"437","desc":"387"},{"messageId":"382","fix":"438","desc":"384"},{"messageId":"385","fix":"439","desc":"387"},"removeEscape",{"range":"440","text":"441"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"442","text":"443"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"444","text":"441"},{"range":"445","text":"443"},{"range":"446","text":"441"},{"range":"447","text":"443"},{"range":"448","text":"441"},{"range":"449","text":"443"},{"range":"450","text":"441"},{"range":"451","text":"443"},{"range":"452","text":"441"},{"range":"453","text":"443"},{"range":"454","text":"441"},{"range":"455","text":"443"},{"range":"456","text":"441"},{"range":"457","text":"443"},{"range":"458","text":"441"},{"range":"459","text":"443"},{"range":"460","text":"441"},{"range":"461","text":"443"},{"range":"462","text":"441"},{"range":"463","text":"443"},{"range":"464","text":"441"},{"range":"465","text":"443"},{"range":"466","text":"441"},{"range":"467","text":"443"},{"range":"468","text":"441"},{"range":"469","text":"443"},{"range":"470","text":"441"},{"range":"471","text":"443"},{"range":"472","text":"441"},{"range":"473","text":"443"},{"range":"474","text":"441"},{"range":"475","text":"443"},{"range":"476","text":"441"},{"range":"477","text":"443"},{"range":"478","text":"441"},{"range":"479","text":"443"},{"range":"480","text":"441"},{"range":"481","text":"443"},{"range":"482","text":"441"},{"range":"483","text":"443"},{"range":"484","text":"441"},{"range":"485","text":"443"},{"range":"486","text":"441"},{"range":"487","text":"443"},{"range":"488","text":"441"},{"range":"489","text":"443"},{"range":"490","text":"441"},{"range":"491","text":"443"},{"range":"492","text":"441"},{"range":"493","text":"443"},{"range":"494","text":"441"},{"range":"495","text":"443"},[767,768],"",[767,767],"\\",[1188,1189],[1188,1188],[1190,1191],[1190,1190],[1196,1197],[1196,1196],[1201,1202],[1201,1201],[1204,1205],[1204,1204],[1206,1207],[1206,1206],[1208,1209],[1208,1208],[1210,1211],[1210,1210],[1212,1213],[1212,1212],[1216,1217],[1216,1216],[1218,1219],[1218,1218],[1268,1269],[1268,1268],[1270,1271],[1270,1270],[1276,1277],[1276,1276],[1281,1282],[1281,1281],[1284,1285],[1284,1284],[1286,1287],[1286,1286],[1288,1289],[1288,1288],[1290,1291],[1290,1290],[1296,1297],[1296,1296],[1298,1299],[1298,1298],[1542,1543],[1542,1542],[1544,1545],[1544,1544],[1573,1574],[1573,1573],[1575,1576],[1575,1575],[2835,2836],[2835,2835]]